<HTML><HEAD>
<!!---------------------------------------------------------------------->
<!! Copyright (C) 1999 Dietmar Kuehl, Claas Solutions GmbH >
<!!>
<!! Permission to use, copy, modify, distribute and sell this >
<!! software for any purpose is hereby granted without fee, provided >
<!! that the above copyright notice appears in all copies and that >
<!! both that copyright notice and this permission notice appear in >
<!! supporting documentation. Dietmar Kuehl and Claas Solutions make no >
<!! representations about the suitability of this software for any >
<!! purpose. It is provided "as is" without express or implied warranty. >
<!!---------------------------------------------------------------------->
<TITLE>mfd/l_heap.3</TITLE>
</HEAD>
<BODY BGCOLOR=white LINK="0000FF" VLINK="800080">
<IMG SRC=c++boost.jpg ALIGN=TOP WIDTH=277 HEIGHT=86><BR>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 COLS=2>
<TR><TD WIDTH=109 VALIGN=TOP><IMG SRC=sidebar.jpg WIDTH=109 HEIGHT=494>
</TD><TD>
<SPACER TYPE=VERTICAL SIZE=40>
<H1>Template Class <nobr><tt>lazy_fibonacci_heap&lt;T, Comp&gt;</tt></nobr></H1>

  <A NAME="Synopsis"><H1>Synopsis</H1></A>

    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 COLS=2>
<TR><TD WIDTH=30 VALIGN=TOP></TD><TD>
<PRE>
#include "boost/l_heap.hpp"

template &lt;class T&gt;
class boost::lazy_fibonacci_heap_base
{
public:
  class iterator
  {
  public:
    iterator();

    bool operator== (iterator const& it) const;
    bool operator!= (iterator const& it) const;
    T const& operator* () const;
    T const* operator-&gt; () const;

    iterator &operator++ ();
    iterator operator++ (int);
  };

public:
  bool      <A HREF="heap-common.html#empty">empty</A>() const;
  size_type <A HREF="heap-common.html#size">size</A>() const;

  iterator <A HREF="heap-common.html#begin">begin</A>() const;
  iterator <A HREF="heap-common.html#end">end</A>() const;

private:
  lazy_fibonacci_heap_base(lazy_fibonacci_heap_base const&); // deliberately not implemented
  void operator= (lazy_fibonacci_heap_base const&);          // deliberately not implemented
};

template &lt;class T, class Comp = std::less&lt;T&gt; &gt;
class boost::lazy_fibonacci_heap: public boost::lazy_fibonacci_heap_base&lt;T&gt;
{
public:
  typedef <I>unsigned integral type</I>                         <A HREF="heap-common.html#size_type">size_type</A>;
  typedef <I>pointer type</I>                                   <A HREF="heap-common.html#pointer">pointer</A>;
  typedef T                                              <A HREF="heap-common.html#value_type">value_type</A>;
  typedef T const&                                       <A HREF="heap-common.html#const_reference">const_reference</A>;
  typedef typename lazy_fibonacci_heap_base&lt;T&gt;::iterator <A HREF="heap-common.html#const_iterator">const_iterator</A>;
  typedef Comp                                           <A HREF="heap-common.html#compare_type">compare_type</A>;

  explicit <A HREF="heap-common.html#default-ctor">lazy_fibonacci_heap</A>(Comp const& comp = Comp());

  pointer  <A HREF="heap-common.html#push">push</A>(T const& val);
  void     <A HREF="heap-common.html#pop">pop</A>();
  T const& <A HREF="heap-common.html#top">top</A>() const;
  void <A HREF="heap-common.html#remove">remove</A>(pointer ptr);

  template &lt;typename K&gt; void <A HREF="heap-common.html#change_top">change_top</A>(K const& val);
  template &lt;typename K&gt; void <A HREF="heap-common.html#change">change</A>(pointer ptr, K const& val);
  template &lt;typename K&gt; void <A HREF="heap-common.html#decrease">decrease</A>(pointer ptr, K const& val);
  template &lt;typename K&gt; void <A HREF="heap-common.html#increase">increase</A>(pointer ptr, K const& val);
};
    </PRE></TD></TABLE>

  
  <A NAME="Description"><H1>Description</H1></A>

    This class is a variation on <A HREF="f_heap.html">Fibonacci heaps</A> which seems
    to provide better performance if there are a lot operations changing the priority
    of the elements. The idea of this class is to avoid work as long as it is not
    necessary to do the work (a very obvious approach which I also apply in real
    life). This way, some work can be avoided all together. The work which can
    be avoided are the necessary link operations when a node is made a root
    until the maximum element is to be accessed. Thus, whenever a node is made
    a root, it is actually stored in a list of pending roots. This list is
    processed and made real roots when the maximum element of the priority queue
    is accessed (eg. using <A HREF="heap-common.html#top"><nobr><tt>top</tt></nobr>()</A>). I have
    no clue whether the asymptotical behavior of Fibonacci heaps is messed up
    with this approach but my feeling is that it is not messed up (but I have
    no formal proof).

    <P>


    For a description of the methods of <nobr><tt>lazy_fibonacci_heap&lt;T, Comp&gt;</tt></nobr> see the
    description of <A HREF="heap-common.html">common methods</A>.
  
  <A NAME="See Also"><H1>See Also</H1></A>

    <A HREF="f_heap.html">f_heap(3)</A>,
    <A HREF="heap.html">heap(3)</A>,
    <A HREF="heap-common.html">heap-common(3)</A>
  
<HR>

Copyright &copy 1999 <A HREF=http://www.claas-solutions.de/kuehl>Dietmar K&uuml;hl</A> (<A HREF="mailto:dietmar.kuehl@claas-solutions.de">dietmar.kuehl@claas-solutions.de</A>)<BR>
<a href="http://www.claas-solutions.de/">Claas Solutions GmbH</a>
</FONT></FONT>
</TD></TR></TABLE>
</BODY></HTML>

