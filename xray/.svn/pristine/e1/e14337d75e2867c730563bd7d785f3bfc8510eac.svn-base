<HTML><HEAD>
<!!---------------------------------------------------------------------->
<!! Copyright (C) 1999 Dietmar Kuehl, Claas Solutions GmbH >
<!!>
<!! Permission to use, copy, modify, distribute and sell this >
<!! software for any purpose is hereby granted without fee, provided >
<!! that the above copyright notice appears in all copies and that >
<!! both that copyright notice and this permission notice appear in >
<!! supporting documentation. Dietmar Kuehl and Claas Solutions make no >
<!! representations about the suitability of this software for any >
<!! purpose. It is provided "as is" without express or implied warranty. >
<!!---------------------------------------------------------------------->
<TITLE>doc/s_heap.mfd.3</TITLE>
</HEAD>
<BODY BGCOLOR=white LINK="0000FF" VLINK="800080">
<IMG SRC=c++boost.jpg ALIGN=TOP WIDTH=277 HEIGHT=86><BR>
<TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 COLS=2>
<TR><TD WIDTH=109 VALIGN=TOP><IMG SRC=sidebar.jpg WIDTH=109 HEIGHT=494>
</TD><TD>
<SPACER TYPE=VERTICAL SIZE=40>
<H1>Template Class <nobr><tt>splay_heap&lt;T, Comp&gt;</tt></nobr></H1>

  <A NAME="Synopsis"><H1>Synopsis</H1></A>

    <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 COLS=2>
<TR><TD WIDTH=30 VALIGN=TOP></TD><TD>
<PRE>
#include "boost/s_heap.hpp"

template &lt;typename T, typename Comp = std::less&lt;T&gt; &gt;
class boost::splay_heap
{
public:
  typedef T             <A HREF="heap-common.html#value_type">value_type</A>;
  typedef T const&      <A HREF="heap-common.html#const_reference">const_reference</A>;
  typedef unsigned long <A HREF="heap-common.html#size_type">size_type</A>;
  typedef Comp          <A HREF="heap-common.html#compare_type">compare_type</A>;
  typedef node*         <A HREF="heap-common.html#pointer">pointer</A>;

  class <A HREF="heap-common.html#const_iterator">const_iterator</A>
  {
  public:
    const_iterator();
    explicit const_iterator(node* root);

    bool operator== (const_iterator const& it) const;
    bool operator!= (const_iterator const& it) const;

    const_reference operator* () const;
    T const*        operator-&gt; () const;

    const_iterator& operator++ ();
    const_iterator operator++ (int);
  };

  <A HREF="heap-common.html#default-ctor">splay_heap</A>(Comp const& comp = Comp());
  ~splay_heap();

  bool            <A HREF="heap-common.html#empty">empty</A>() const;
  size_type       <A HREF="heap-common.html#size">size</A>() const;
  const_reference <A HREF="heap-common.html#top">top</A>() const;
  pointer         <A HREF="heap-common.html#push">push</A>(const_reference);
  void            <A HREF="heap-common.html#pop">pop</A>();
  void            <A HREF="heap-common.html#remove">remove</A>(pointer);

  template &lt;typename K&gt; void <A HREF="heap-common.html#change_top">change_top</A>(K const&);
  template &lt;typename K&gt; void <A HREF="heap-common.html#change">change</A>(pointer, K const&);
  template &lt;typename K&gt; void <A HREF="heap-common.html#decrease">decrease</A>(pointer, K const&);
  template &lt;typename K&gt; void <A HREF="heap-common.html#increase">increase</A>(pointer, K const&);

  const_iterator <A HREF="heap-common.html#begin">begin</A>() const;
  const_iterator <A HREF="heap-common.html#end">end</A>() const;

private:
  splay_heap(splay_heap const&);     // deliberately not implemented
  void operator=(splay_heap const&); // deliberately not implemented
};
    </PRE></TD></TABLE>

  
  <A NAME="Description"><H1>Description</H1></A>

    The template class <nobr><tt>splay_heap</tt></nobr> uses the techniques of a splay
    tree to maintain the elements. This means that internally, this heap
    looks like a normally binary search tree where nodes to the left
    of the root are smaller and nodes to the right are larger than the
    root. Splay trees are not balanced but are dynamically adapted when
    being used: A node accessed is moved to the root. For the use of
    a priority queue, the maximum element is splayed to the top of the
    tree. Since this is the element most often accessed, insert operations
    which would insert the new node at the top are modified for the use
    in splay heaps: The node is inserted using a normal insertion mechanism
    for binary trees. The current implementation does the same for removals,
    that is, the nodes are just removed and only subtrees become splayed.

    <P>


    My understanding is that there is no theory known tell to what the asymptotic
    behavior of such structures is. For splay trees, there is an average access
    of O(log n) but a worst case access of O(n). Since splay heaps do not become
    rebalanced, I doubt similar results can be proofed for splay heaps. It could
    be possible to that some randomized approach for remove of nodes can enhance
    the relative balance: Currently, the maximum element in the left subtree of
    the removed node is splayed to the top of the subtree before the node is cut.
    Potentially, it could be better to switch between splaying the maxium and the
    minimum.

    <P>


    The current implementation of splay heaps is rather straight forward and I
    haven't tested variations of the implementation. In particular, to modify
    or remove an arbitrary node, this node is search in the tree which makes
    the handling of nodes with identical priorities a little bit more complex
    than necessary. An obvious implementation variation could be the use of
    a pointer to the parent to avoid the need to search the node before it
    can be changed and the remove the special handling of duplicate priorities.
    However, this would mean that the pointer to the parent is maintained. It is unclear
    whether this approach would be better. In any case, the performance I measure
    for splay heaps (on random data) was quite satisfactory: In most cases splay
    heaps provided the best performance. However, in one case splay heaps also
    produced the by far worst performance...

    <P>


    Some literature about splay heaps can be found in <I>Practical Data
    Structures in C++</I>, B.Flamig, Wiley, one of the few books I have seen
    which at least starts to use C++ idioms to implement data structures (in most
    books, the C++ code looks rather like Pascal than C++...). However,
    the book does not take an STL like approach to algorithms and data structurs.
    In any case, this implementation of splay heaps looks quite different from
    the version in the book. Most notably, this implementation of splay heaps
    does not implement a complete splay heap but is rather restricted to the
    cases occuring in heap operations.

    <P>


    For a description of the methods of <nobr><tt>splay_heap&lt;T, Comp&gt;</tt></nobr> see the
    description of <A HREF="heap-common.html">common methods</A>.
  
  <A NAME="See Also"><H1>See Also</H1></A>

    <A HREF="heap.html">heap(3)</A>,
    <A HREF="heap-common.html">heap-common(3)</A>
  
<HR>

Copyright &copy 1999 <A HREF=http://www.claas-solutions.de/kuehl>Dietmar K&uuml;hl</A> (<A HREF="mailto:dietmar.kuehl@claas-solutions.de">dietmar.kuehl@claas-solutions.de</A>)<BR>
<a href="http://www.claas-solutions.de/">Claas Solutions GmbH</a>
</FONT></FONT>
</TD></TR></TABLE>
</BODY></HTML>

