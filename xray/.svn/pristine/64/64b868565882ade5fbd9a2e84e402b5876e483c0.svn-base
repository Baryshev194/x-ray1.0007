<html>

<head>
<TITLE>The Boost Format library</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF" text="#000000">

<table border="1" bgcolor="#007F7F" cellpadding="2">
  <tr>
    <td bgcolor="#FFFFFF"><img src="../../c++boost.gif" alt="c++boost.gif (8819 bytes)" width="277" height="86"></td>
    <td><a href="../../index.htm"><font face="Arial" color="#FFFFFF"><big>Home </big></font></a></td>
    <td><a href="../libraries.htm"><font face="Arial" color="#FFFFFF"><big>Libraries </big></font></a></td>
    <td><a href="../../people/people.htm"><font face="Arial" color="#FFFFFF"><big>People </big></font></a></td>
    <td><a href="../../more/faq.htm"><font face="Arial" color="#FFFFFF"><big>FAQ </big></font></a></td>
    <td><a href="../../more/index.htm"><font face="Arial" color="#FFFFFF"><big>More </big></font></a></td>
  </tr>
</table>

<h1>Boost Format library</h1>

<p>
The format library provides a class for formatting arguments according to a format-string, 
as does printf, but with two major differences :
<br>
<ul>
<li>format sends the arguments to an internal stream, and so is entirely type-safe and 
naturally supports all user-defined types.</li>
<li>The ellipsis (...) can not be used correctly in the strongly typed context of format,
and thus the function call with arbitrary arguments is replaced by successive calls to an 
<i>argument feeding</i> <b>operator%</b>
</li>
</ul>

</p>

<p>
<br>
You can find more Details in :
<ul>
  <li><a href="doc/format.html">Documentation</a> (HTML).</li>
  <li>Headers <ul>
                <li><a href="../../boost/format.hpp">format.hpp</a> : user frontend.</li>
                <li><a href="../../boost/format/format_fwd.hpp">format_fwd.hpp</a> 
                  : user forward declarations.</li>
                <li><a href="../../boost/format/format_class.hpp">
                  format_class.hpp</a> : the class interface</li>
                <li><a href="../../boost/format/format_implementation.hpp">
                    format_implementation.hpp</a>: implementation of the member functions</li>
                <li><a href="../../boost/format/feed_args.hpp">feed_args.hpp</a> 
                  : argument feeding helper functions</li>
                <li><a href="../../boost/format/free_funcs.hpp">free_funcs.hpp</a>
                  : free functions definitions</li>
                <li><a href="../../boost/format/parsing.hpp">parsing.hpp</a>
                  : code for parsing format-strings</li>
                <li><a href="../../boost/format/group.hpp">group.hpp</a>
                  : auxiliary struct used to group arguments and manipulators</li>
                <li><a href="../../boost/format/exceptions.hpp">exceptions.hpp</a>
                  : exceptions used by the library</li>
                <li><a href="../../boost/format/internals.hpp">internals.hpp</a>
                  : auxiliary structs stream_format_state and format_item</li>
              </ul>
            </li>
  <li> Sample programs <ul>
                <li>The program <A href="./example/sample_formats.cpp">sample_formats.cpp</A> 
                demonstrates simple uses of <B>format</B>. </li>
                <li><A href="./example/sample_new_features.cpp">sample_new_features.cpp</A> 
                  illustrates the few formatting features that were added to printf's syntax such 
                  as  simple positional directives, centered alignment, and 'tabulations'. </li>
                <li><A href="./example/sample_advanced.cpp">sample_advanced.cpp</A> 
                  demonstrates uses of advanced features, like reusing, and modifying, 
                  format objects, etc.. </li>
                <li>And <A href="./example/sample_userType.cpp">sample_userType.cpp</A> 
                  shows the behaviour of the <b>format</b> library on user-defined types.</li>
              </ul>
</li>
</ul>
Submitted by <a href="../../people/samuel_krempp.htm">Samuel Krempp</a>.</p>
</body>

</html>
