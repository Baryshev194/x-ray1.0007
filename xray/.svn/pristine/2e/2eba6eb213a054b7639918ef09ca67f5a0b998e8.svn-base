#!/usr/local/bin/expect
# -*-C++-*- d_heap.exp -- C++ is actually a lie but it helps
# <!!----------------------------------------------------------------------> 
# <!! Copyright (C) 1999 Dietmar Kuehl, Claas Solutions GmbH > 
# <!!> 
# <!! Permission to use, copy, modify, distribute and sell this > 
# <!! software for any purpose is hereby granted without fee, provided > 
# <!! that the above copyright notice appears in all copies and that > 
# <!! both that copyright notice and this permission notice appear in > 
# <!! supporting documentation. Dietmar Kuehl and Claas Solutions make no > 
# <!! representations about the suitability of this software for any > 
# <!! purpose. It is provided "as is" without express or implied warranty. > 
# <!!----------------------------------------------------------------------> 

# Author: Dietmar Kuehl dietmar.kuehl@claas-solutions.de 
# Title:  Test for presence of all functions according to the documentation
# Version: $Id: d_heap.exp,v 1.3 1999/07/12 18:57:41 kuehl Exp $ 

# -------------------------------------------------------------------------- 

inline_compile {
  #include "boost/heap.hpp"
  #include <iostream>

  template <class T> void test_type(T&) {}
  template <class T> void same_type(T*, T*) {}
  template <class T1, class T2> void equal_type() { same_type((T1*)0, (T2*)0); }

  int main()
  {
    std::cout << "NOTE: This program is not supposed to run!\n";
    std::cout << "      It just tests that everything mentioned in the docs is there!\n";
    std::cout << "      Actually it will almost certainly crash (eg. seg.fault)!\n";

    boost::d_heap<int> heap;
    test_type<boost::d_heap<int, std::less<int> > >(heap);
    test_type<boost::d_heap<int, std::less<int>, 2> >(heap);

    equal_type<int, boost::d_heap<int>::value_type>();
    equal_type<size_t, boost::d_heap<int>::size_type>();
    equal_type<std::less<int>, boost::d_heap<int>::compare_type>();

    test_type<boost::d_heap<int>::iterator const>(heap.begin());
    test_type<boost::d_heap<int>::iterator const>(heap.end());

    boost::d_heap<int>::iterator it;
    test_type<bool const>(it == it);
    test_type<bool const>(it != it);

    test_type<int const>(*it);
    test_type<int const* const>(it.operator->());
    
    test_type<boost::d_heap<int>::iterator>(++it);
    test_type<boost::d_heap<int>::iterator const>(it++);

    heap.remove(boost::d_heap<int>::pointer());
    heap.change(boost::d_heap<int>::pointer(), 5);
    heap.decrease(boost::d_heap<int>::pointer(), 5);
    heap.increase(boost::d_heap<int>::pointer(), 5);

    test_type<bool const>(heap.empty());
    test_type<boost::d_heap<int>::size_type const>(heap.size());
    test_type<boost::d_heap<int>::pointer const>(heap.push(10));
    test_type<int const>(heap.top());
    heap.pop();

    return 0;
  }
}
