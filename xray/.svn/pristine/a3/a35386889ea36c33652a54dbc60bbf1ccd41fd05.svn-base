<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>gregorian::date Documentation</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head>

<body>
<a href="../../../index.htm">
<img align="left" src="../../../c++boost.gif" alt="C++ Boost">
</a>  

<h1>gregorian::date</h1>
<p>&nbsp;<p>
<hr>
<p>
<a href="index.html">Overall Index</a> -- 
<a href="gregorian.html">Gregorian Index</a> --
<a href="posix_time.html">Posix Time Index</a>
<p>
<font class="bold">Date Documentation</font> 
<p>
<a href="class_date.html#header">Header</a> -- 
<a href="class_date.html#construct">Construction</a> -- 
<a href="class_date.html#constructfromstring">Construct from String</a> -- 
<a href="class_date.html#constructfromclock"> Construct from Clock</a> -- 
<a href="class_date.html#accessors">Accessors</a> -- 
<a href="class_date.html#conversiontostring">Conversion To String</a> -- 
<a href="class_date.html#operators">Operators</a>
<p>
<h2><a name="intro">Introduction</a></h2>

<p>
The class boost::gregorian::date is the primary interface for date programming. In general, the date class is immutable once constructed although it does allow assignment.  

<p>
Other techniques for creating dates include <a href="date_iterators.html">date iterators</a> and <a href="date_algorithms.html">date algorithms or generators</a>.  

<p>

<p>
<h2><a name="header">Header</a></h2>
<pre>
#include "boost/date_time/gregorian/gregorian.hpp" //include all types plus i/o
or
#include "boost/date_time/gregorian/gregorian_types.hpp" //no i/o just types
</pre>
<h2><a name="construct">Construction</a></h2>


<p>
<table border=1 cellspacing=3 cellpadding=3>
<tr><td><b>Syntax</b></td><td><b>Description</b></td><td><b>Example</b></td></tr>
<tr><td>date(greg_year year, greg_month month, greg_day day)</td>
        <td>Construct from parts of date. <b>Throws</b> bad_year,
	    bad_day_of_month, or bad_day_month (derivatives
            of std::out_of_range) if
	    the year, month or day are out of range.  
        </td>
	<td>date d(2002,Jan,10)</td></tr>
<tr><td>date(date d)</td>
        <td>Copy constructor</td>
	<td>date d1(d)</td></tr>
<tr><td>date(special_values sv)</td>
        <td>Constructor for infinitites, not-a-date-time, max_date, and min_date</td>
	<td>date d1(neg_infin);<br>date d2(pos_infin);<br>date d3(not_a_date_time);<br>date d4(max_date);<br>date d5(min_date);</td></tr>

</table>

<p>
<h2><a name="constructfromstring">Construction From String</a></h2>


<p>
<table border=1 cellspacing=3 cellpadding=3>
<tr><td><b>Syntax</b></td><td><b>Description</b></td><td><b>Example</b></td></tr>
<tr><td>date <font class="func">from_string</font>(const std::string&)</td>
        <td>From delimited date string where with order year-month-day eg: 2002-1-25</td>
	<td>std::string ds("2002/1/25");<br>
            date d(from_string(ds))</td></tr>
<tr><td>date <font class="func">from_undelimited_string</font>(const std::string&)</td>
        <td>From iso type date string where with order year-month-day eg: 20020125</td>
	<td>std::string ds("20020125");<br>
            date d(from_undelimited_string(ds))</td></tr>

</table>
<p>

<h2><a name="constructfromclock">Construction From Clock</a></h2>

<p>
<table border=1 cellspacing=3 cellpadding=3>
<tr><td><b>Syntax</b></td><td><b>Description</b></td><td><b>Example</b></td></tr>
<tr><td>day_clock::local_day()</td>
        <td>Get the local day based on the time zone settings of the computer.</td>
	<td>date d(day_clock::local_day())</td></tr>
<tr><td>day_clock::universal_day()</td>
        <td>Get the UTC day.</td>
	<td>date d(day_clock::universal_day())</td></tr>
</table>

<p>

<h2><a name="accessors">Accessors</a></h2>


<p>
<table border=1 cellspacing=3 cellpadding=3>
<tr><td><b>Syntax</b></td><td><b>Description</b></td><td><b>Example</b></td></tr>
<tr><td>greg_year <font class="func">year</font>() const</td>
        <td>Get the year part of the date.</td>
	<td>date d(2002,Jan,10); d.year() --> 2002;</td></tr>
<tr><td>greg_month <font class="func">month</font>() const</td>
        <td>Get the month part of the date.</td>
	<td>date d(2002,Jan,10); d.month() --> 1;</td></tr>
<tr><td>greg_day <font class="func">day</font>() const</td>
        <td>Get the day part of the date.</td>
	<td>date d(2002,Jan,10); d.day() --> 10;</td></tr>
<tr><td>greg_ymd <font class="func">year_month_day</font>() const</td>
        <td>Return a year_month_day struct. More efficient when all 3 parts of the date are needed.</td>
	<td>date d(2002,Jan,10);
	      <br>date::ymd_type ymd = d.year_month_day();
              <br>ymd.year --> 2002, ymd.month --> 1, ymd.day --> 10</td></tr>
<tr><td>greg_day_of_week <font class="func">day_of_week</font>() const</td>
        <td>Get the day of the week (eg: Sunday, Monday, etc.</td>
	<td>date d(2002,Jan,10); d.day() --> Thursday;</td></tr>
<tr><td>bool <font class="func">is_infinity</font>() const</td>
        <td>Returns true if date is either positive or negative infinity</td>
	<td>date d(pos_infin); d.is_infinity() --> true;</td></tr>
<tr><td>bool <font class="func">is_neg_infinity</font>() const</td>
        <td>Returns true if date is negative infinity</td>
	<td>date d(neg_infin); d.is_neg_infinity() --> true;</td></tr>
<tr><td>bool <font class="func">is_pos_infinity</font>() const</td>
        <td>Returns true if date is positive infinity</td>
	<td>date d(neg_infin); d.is_pos_infinity() --> true;</td></tr>
<tr><td>bool <font class="func">is_not_a_date</font>() const</td>
        <td>Returns true if value is not a date</td>
	<td>date d(not_a_date_time); d.is_not_a_date() --> true;</td></tr>
<tr><td>long <font class="func">modjulian_day</font>() const</td>
        <td>Returns the modified julian day for the date.</td>
	<td></td></tr>
<tr><td>long <font class="func">julian_day</font>() const</td>
        <td>Returns the julian day for the date.</td>
	<td></td></tr>
<tr><td>int <font class="func">week_number</font>() const</td>
        <td>Returns the ISO 8601 week number for the date.</td>
	<td></td></tr>

</table>

<p>
<h2><a name="conversiontostring">Conversion To String</a></h2>

<p>
<table border=1 cellspacing=3 cellpadding=3>
<tr><td><b>Syntax</b></td><td><b>Description</b></td><td><b>Example</b></td></tr>
<tr><td>std::string <font class="func">to_simple_string</font>(date d)</td>
        <td>To YYYY-mmm-DD string where mmm 3 char month name.</td>
        <td>2002-Jan-01</td></tr>
<tr><td>std::string <font class="func">to_iso_string</font>(date d)</td>
        <td>To YYYYMMDD where all components are integers.</td>
        <td>20020131</td></tr>
<tr><td>std::string <font class="func">to_iso_extended_string</font>(date d)</td>
        <td>To YYYY-MM-DD where all components are integers.</td>
        <td>2002-01-31</td></tr>

</table>
<p>


<h2><a name="operators">Operators</a></h2>


<p>
<table border=1 cellspacing=3 cellpadding=3>
<tr><td><b>Syntax</b></td><td><b>Description</b></td><td><b>Example</b></td></tr>
<tr><td>operator&lt;&lt;</td>
        <td>Stream output operator</td>
	<td>date d(2002,Jan,1)<br>
	    std::cout &lt;&lt; d &lt;&lt; std::endl;</td></tr>
<tr><td>operator==, operator!=,<br> operator&gt;, operator&lt; 
        <br> operator&gt;=, operator&lt;=</td>
        <td>A full complement of comparison operators</td>
	<td>d1 == d2, etc</td></tr>
<tr><td>date operator+(date_duration) const</td>
        <td>Return a date adding a day offset</td>
	<td>date d(2002,Jan,1); 
            <br>date_duration dd(1); 
            <br>date d2 = d + dd;</td></tr>
<tr><td>date operator-(date_duration) const</td>
        <td>Return a date by adding a day offset </td>
	<td>date d(2002,Jan,1); 
            <br>date_duration dd(1); 
            <br>date d2 = d - dd;</td></tr>
<tr><td>date_duration operator-(date) const</td>
        <td>Return a date duration by subtracting two dates</td>
	<td>date d1(2002,Jan,1); 
        <br>date d2(2002,Jan,2); 
        <br>date_duration dd = d2-d1;</td></tr>

</table>

<hr>
<address><small>
<!-- hhmts start -->
Last modified: Sun Jan 19 16:01:22 MST 2003
<!-- hhmts end -->
 by <a href="mailto:jeff&#64;crystalclearsoftware.com">Jeff Garland</a> &copy; 2000-2002
</small></address>
</body>
</html>

