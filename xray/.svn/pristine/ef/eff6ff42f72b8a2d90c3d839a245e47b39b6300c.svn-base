subproject libs/mpl/test ;

# bring in rules for testing
SEARCH on testing.jam = $(BOOST_BUILD_PATH) ;
include testing.jam ;

compile advance.cpp ;
compile always.cpp ;
compile apply.cpp ;
compile apply_if.cpp ;
compile arithmetic.cpp ;
compile as_sequence.cpp ;
compile assert_is_same.cpp ;
compile at.cpp ;
compile back.cpp ;
compile bind.cpp ;
compile bitwise.cpp ;
compile bool.cpp ;
compile comparison.cpp ;
compile contains.cpp ;
compile copy.cpp ;
compile copy_backward.cpp ;
compile copy_backward_if.cpp ;
compile copy_if.cpp ;
compile count.cpp ;
compile count_if.cpp ;
compile distance.cpp ;
compile empty.cpp ;
compile equal.cpp ;
compile erase.cpp ;
compile erase_range.cpp ;
compile filter_view.cpp ;
compile find.cpp ;
compile find_if.cpp ;
compile fold.cpp ;
unit-test for_each : for_each.cpp : <sysinclude>$(BOOST_ROOT) ;
compile front.cpp ;
compile identity.cpp ;
compile if.cpp ;
compile inherit.cpp ;
compile insert.cpp ;
compile insert_range.cpp ;
compile int.cpp ;
compile integral_c.cpp ;
compile is_placeholder.cpp ;
compile is_sequence.cpp ;
compile joint_view.cpp ;
compile lambda.cpp ;
compile lambda_args.cpp ;
compile list.cpp ;
compile list_c.cpp ;
compile logical.cpp ;
compile lower_bound.cpp ;
compile next.cpp ;
compile pop_front.cpp ;
compile push_front.cpp ;
compile quote.cpp ;
compile range_c.cpp ;
compile replace.cpp ;
compile replace_if.cpp ;
compile reverse.cpp ;
compile same_as.cpp ;
compile single_view.cpp ;
compile size.cpp ;
compile sizeof.cpp ;
compile transform.cpp ;
compile transform_view.cpp ;
compile unique.cpp ;
compile upper_bound.cpp ;
compile vector.cpp ;
compile vector_c.cpp ;
compile zip_view.cpp ;
