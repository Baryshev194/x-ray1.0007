//#define BOOST_SPIRIT_DEBUG
#include <boost/spirit/spirit.hpp>
#include <lexer.hpp>
#include <iostream>
#include <fstream>
#include <string>

using namespace spirit;
using namespace std;

ostream& operator<<(ostream& out, wchar_t c)
{
    if (isgraph(c))
	    out << char(c);
    else
        out << '.';
    return out;
};
ostream& operator<<(ostream& out, wchar_t const* c)
{
    while (*c)
	    out << *c++;
    return out;
};

template <typename LexerT, typename CharT>
void test_match(LexerT& lexer, const CharT* str)
{
    int token;
    const CharT* end = str;
    const CharT* prev = str;
    while (*end)
        ++end;

    cout << "testing string: " << str << endl;
    while ((token = lexer.next_token(str, end)) != -1 && str != end)
    {
        cout << "matched token #" << token << " :" << string(prev, str) << '\n';
        prev = str;
    }
    if (token == -1)
    {
        cout << "lexing failed at: " << str << endl;
    }
    else
    {
        cout << "matched token #" << token << " :" << string(prev, str) << '\n';
    }

}

using namespace std;

int main(int argc, char** argv)
{

    if (argc != 3)
    {
        cout << "Usage: <lex file> <lex string>" << endl;
        return 1;
    }

    lexer<char> lex;
    string line;
    int id = 0;
    ifstream in(argv[1]);
    if (!in)
    {
        cout << "Could not open file: " << argv[1] << endl;
        return 1;
    }

    for (getline(in, line); in.good(); getline(in, line))
    {
        if (line.size() > 0)
        {
            cout << "token #" << id << ": " << line << '\n';
            lex.register_regex(line.c_str(), id++);
        }
    }

    lex.createdfa();

#ifdef BOOST_SPIRIT_DEBUG
    lex.dump(cout);
#endif

    ifstream testfile(argv[2]);
    if (testfile)
    {
        string teststr, line;
        for (getline(testfile, line); testfile.good(); getline(testfile, line))
        {
            teststr += line;
            teststr += '\n';
        }
        test_match(lex, teststr.c_str());
    }
    else
    {
        test_match(lex, argv[2]);
    }

    return 0;
}





