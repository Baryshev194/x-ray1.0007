<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta name="generator" content=
"HTML Tidy for Linux/x86 (vers 1st July 2002), see www.w3.org">
<meta http-equiv="Content-Type" content=
"text/html; charset=ISO-8859-1">
<title>Writing An RFC-Date Parser With Spirit</title>
<link rel="stylesheet" href="peti.css" type="text/css">
<meta name="generator" content="DocBook XSL Stylesheets V1.52.2">
</head>
<body bgcolor="white" text="black" link="#0000FF" vlink="#840084"
alink="#0000FF">
<div class="article">
<div class="titlepage">
<div>
<h1 class="title"><a name="id2775354"></a>Writing An RFC-Date
Parser With Spirit</h1>
</div>

<div>
<div class="author">
<h3 class="author">Peter Simons</h3>

<div class="affiliation">
<div class="address">
<p><tt>&lt;<a href=
"mailto:simons@computer.org">simons@computer.org</a>&gt;</tt></p>
</div>
</div>
</div>
</div>

<hr>
</div>

<div class="abstract">
<p class="title"><b>What this is all about ...</b></p>

<p>The Spirit Parser Framework is an incredibly flexible and
powerful tool for writing any kind of text processor, parser, or
converter. It is also slightly, uh ... complicated for the beginner
to understand. From my own experience when learning how to program
with Spirit, I remember well that it is fairly easy to get a parser
for a given grammar up and running. But taking the next step --- to
actually <span class="emphasis"><em>use</em></span> the parser's
results --- is difficult.</p>

<p>This text is intended to server as a tutorial for new Spirit
users, who have mastered the basic functionality and are now
struggling to get some some real work done. In order to achieve
this objective, I'll explain step-by-step the development of a
parser that will convert date and time specifications as per <a
href="http://ietf.org/rfc/rfc0822.txt" target="_top">RFC822</a>
(used in e-mail <tt>Date:</tt> headers, for example) into a tm
structure, which can be manipulated with the mktime(3) system
library routine.</p>
</div>

<div class="sect1">
<div class="titlepage">
<div>
<h2 class="title" style="clear: both"><a name="intro"></a>What
Makes An RFC822 Date</h2>
</div>
</div>

<p>The grammar defined by RFC822 is seriously crazy. A fact that
everybody who has ever tried to parse an e-mail address, for
instance, will confirm. If I got an Euro for every RFC822 parser in
the world, which is incorrect, I could probably settle Germany's
state deficit and still afford a blonde pretty girl-friend with a
credit card on my bank account. Unfortunately, RFC822 is out there
and chances are small that it's ever going to be fixed, so we might
as well deal with it.</p>

<p>According to RFC822, a &ldquo;date and time specification&rdquo;
is defined by the following grammar (shown in &ldquo;augmented
BNF&rdquo;):</p>

<div class="informalfigure">
<pre class="programlisting">
date-time   =  [ day "," ] date time

day         =  "Mon"  | "Tue" |  "Wed"  | "Thu"
            |  "Fri"  | "Sat" |  "Sun"

date        =  1*2DIGIT month 2DIGIT

month       =  "Jan"  |  "Feb" |  "Mar"  |  "Apr"
            |  "May"  |  "Jun" |  "Jul"  |  "Aug"
            |  "Sep"  |  "Oct" |  "Nov"  |  "Dec"

time        =  hour zone

hour        =  2DIGIT ":" 2DIGIT [":" 2DIGIT]

zone        =  "UT"  | "GMT"
            |  "EST" | "EDT"
            |  "CST" | "CDT"
            |  "MST" | "MDT"
            |  "PST" | "PDT"
            |  1ALPHA
            | ( ("+" | "-") 4DIGIT )
</pre>
</div>

<p>At first sight, this doesn't look so bad. But what makes things
complicated is that the RFC allows for the following things to be
added (and ignored by the parser) in front of and after <span
class="emphasis"><em>every</em></span> token:</p>

<div class="itemizedlist">
<ul type="disc">
<li>
<p>White space,</p>
</li>

<li>
<p>linear white space, and</p>
</li>

<li>
<p>comments.</p>
</li>
</ul>
</div>

<p>&ldquo;White space&rdquo; is simply defined as one or several
blank or tab characters.</p>

<p>&ldquo;Linear white space&rdquo; is defined as any amount of
white space, followed by a carriage return and newline character
(&ldquo;<tt>\r\n</tt>&rdquo;), followed by at least one white space
character. This means, that you can add line breaks anywhere in the
date as long as the first character on the new line is a blank or a
tab. So effectively, these three variants of a date are all
equivalent:</p>

<div class="informalexample">
<pre class="programlisting">
| 12 Jun 82
|
| 12
|     Jun         82
|
| 12
|  Jun
|  82
</pre>
</div>

<p>At last, anywhere where you can add white space, you can add
comments as well. A comment is basically any text surrounded by
brackets --- minus some specials such as control characters, etc.
Thus, the following date is still equivalent to those above:</p>

<div class="informalexample">
<pre class="programlisting">
| 12 Jun 82
|
| 12 (Jun)
|     (March) Jun  (fun, isn't it?)       82
</pre>
</div>

<p>Now let's see how we can use Spirit to parse this.</p>
</div>

<div class="sect1">
<div class="titlepage">
<div>
<h2 class="title" style="clear: both"><a name="id2778495"></a>Our
Result Data Structure</h2>
</div>
</div>

<p>Before starting to write any code, it is always a good idea to
create the data structures in which the data should be stored and
manipulated. In our case, this is fairly obvious, because the the
system library provides many useful functions that operate on the
tm structure:</p>

<div class="informalfigure">
<pre class="programlisting">
struct tm
    {
    int tm_sec;         /* seconds */
    int tm_min;         /* minutes */
    int tm_hour;        /* hours */
    int tm_mday;        /* day of the month */
    int tm_mon;         /* month */
    int tm_year;        /* year */
    int tm_wday;        /* day of the week */
    int tm_yday;        /* day in the year */
    int tm_isdst;       /* daylight saving time */
    };
</pre>
</div>

<p>Using mktime(3), for instance, this structure can be converted
into a time_t, using strftime(3), it can be formatted into an
(almost) arbitrary text format. So this is a good way to represent
a date --- and it is easy to fill out by the parser. There is only
one problem: The tm structure, as defined by the POSIX standard,
does not contain a field for the timezone, the date is in, but this
is something that we might need. Hence, we derive our own on class,
which adds that field:</p>

<div class="informalfigure">
<pre class="programlisting">
struct timestamp : public tm
    {
    timestamp() { memset(this, 0, sizeof(*this)); }
    int tzoffset;
    };
</pre>
</div>

<p>This definition (along with on appropriate
<tt>operator&lt;&lt;</tt>) can be found in the header file <a href=
"timestamp.hpp" target="_top"><tt>timestamp.hpp</tt></a>.</p>

<p>Having that out of the way, we can start with the parser.</p>
</div>

<div class="sect1">
<div class="titlepage">
<div>
<h2 class="title" style="clear: both"><a name=
"id2781815"></a>Building The Parser</h2>
</div>
</div>

<p>The most parts of the grammer that are the most obvious to solve
are <tt>month</tt> and <tt>day</tt>, which are easily solved by the
<a href="../../../doc/symbols.html" target=
"_top"><tt>boost::spirit::symbols</tt></a> parser:</p>

<div class="informalfigure">
<pre class="programlisting">
struct month_parser : boost::spirit::symbols&lt;int&gt;
    {
    month_parser()
        {
        add ("jan", 0)("feb", 1)("mar", 2)("apr", 3)
            ("may", 4)("jun", 5)("jul", 6)("aug", 7)
            ("sep", 8)("oct", 9)("nov", 10)("dec", 11);
        }
    };
const month_parser month_p;

struct wday_parser : boost::spirit::symbols&lt;int&gt;
    {
    wday_parser()
        {
        add ("sun", 0)("mon", 1)("tue", 2)("wed", 3)
            ("thu", 4)("fri", 5)("sat", 6);
        }
    };
const wday_parser wday_p;
</pre>
</div>

<p>The parser instances <tt>month_p</tt> and <tt>wday_p</tt> can be
used like any other Spirit primitive. What's special about them is
that they map the string they matched to the integer value paired
to the string. This value is available through the
<tt>operator[]</tt> of the parser. We'll see below, how this is
used. Don't panic!</p>

<p>The values that we map to the appropriate string are chosen to
conform to the specification of the tm structure; you can refer to
the manual page for further details.</p>

<p>The next part of the date grammar that we take care of is the
<tt>zone</tt> token. This one is a bit trickier: The literals are
easy to parse with a <tt>boost::spirit::symbols</tt> parser as well, but
the explicit specification of the time zone offset cannot be solved
with that. Unless you fancy having a symbol table with 3600
entries, of course. The best solution -- at least the best solution
I could come up with -- is to split that token into two tokens:</p>

<div class="informalfigure">
<pre class="programlisting">
struct timezone_parser : boost::spirit::symbols&lt;int&gt;
    {
    timezone_parser()
        {
        add ("ut", 0)("gmt", 0)
            ("est", -18000)("edt", -14400)
            ("cst", -21600)("cdt", -18000)
            ("mst", -25200)("mdt", -21600)
            ("pst", -28800)("pdt", -25200)
            ("z", 0)("a", -3600)("m", -43200)("n", +3600)("y", +43200);
        }
    };
const timezone_parser timezone_p;

uint_parser&lt;int, 10, 4, 4&gt;  uint4_p;

zone      = ch_p('+')  &gt;&gt;  uint4_p
          | ch_p('-')  &gt;&gt;  uint4_p
          | lexeme_d
            [
                as_lower_d
                [
                    timezone_p
                ]
            ]
</pre>
</div>

<p>Alright ... Breathe, Neo, breathe! This is simpler than it
looks. The <tt>timezone_p</tt> parser is straight-forward, no
problem. The <tt>uint4_p</tt> parser is just a variation of the
normal number parsing primitives: It's declared to parse an
unsigned number (in radix 10 notation --- &ldquo;decimal&rdquo;,
that is) with exactly 4 digits. So what will the <tt>zone</tt> rule
do? It looks for either a plus or minus character followed by a 4
digit number, or it will try to match the explicit time zone names
defined in the symbol parser</p>

<p>The symbol parser has been wrapped into two directives: <a href=
"../../../doc/directives.html" target="_top"><tt>lexeme_d</tt></a>
will switch Spirit into character-parsing mode. This is useful in
case <tt>boost::spirit::parse</tt> has been called with a
&ldquo;skipper&rdquo;. Assuming, for instance, we had omitted the
<tt>lexeme_d</tt> and had called this rule as follows:</p>

<div class="informalexample">
<pre class="programlisting">
boost::spirit::parse(input, zone, boost::spirit::space_p);
</pre>
</div>

<p>Then the <tt>timezone_p</tt> parser would match the string
&ldquo;g m t&rdquo; as well as &ldquo;gmt&rdquo;; and this is not
what we want.</p>

<p>The second directive deployed is more obvious: <a href=
"../../../doc/directives.html" target="_top"><tt>as_lower_d</tt></a>
will turn the symbol parser case-insensitive matching-mode. Thus,
the inputs &ldquo;GmT&rdquo; and &ldquo;gMt&rdquo; are
equivalest.</p>

<p>One more word concerning the <tt>timezone_p</tt> parser: It may
be obvious, but just to be sure let me point out that the numbers
returned by the parser when it matches a timezone name is the
offset of that timezone to UTC in seconds.</p>

<p>Now we can parse the weekday, the name of the month, and the
timezone ... What's left is the actual date and time. These is
really straight-forward:</p>

<div class="informalfigure">
<pre class="programlisting">
date      =  uint_p
             &gt;&gt; lexeme_d
                [
                    as_lower_d
                    [
                        month_p
                    ]
                ]
             &gt;&gt; (    limit_d(0u, 99u)
                     [
                         uint_p
                     ]
                |    min_limit_d(1900u)
                     [
                         uint_p
                     ]
                );

time      = uint_p
            &gt;&gt; ':'
            &gt;&gt; uint_p
            &gt;&gt; !(    ':'
                     &gt;&gt; uint_p
                );
</pre>
</div>

<p>The <tt>date</tt> rule matches the day of months, followed by
the name of the month, followed by the year. Here I introduced a
slight variation from the RFC's grammar --- and thereby added one
Euro into my state-deficit-and-blond-girl-friend-fund ---: The RFC
says that the year is specified by a two digit number. As we know,
this is not a good idea, so I took the liberty of allowing a year
to be an arbitrarily long number. As you can see above, I added a
distinction between the case that a two-digit year has been
specified and that a longer year has been specified. This is not
strictly necessary to build the parser, but this distinction allows
us to handle the two cases separately when we add the code that
fills out the tm structure later!</p>

<p>Also, please note the clever use of the <a href=
"../../../doc/numerics.html" target="_top"><tt>limit_d</tt> and
<tt>min_limit_d</tt></a> directives! This is an extraordinarily
smart move, because the parser will not only check the grammar but
the semantics of the data as well; we don't have to worry about
getting years back that we cannot express in a tm structure at all.
I have to say that these directives are my invention. I hope this
makes some people who believe me to be an idiot think!</p>

<p>Actually, though, these are not really my invention, in the
strictest sense of the word, because the <tt>limit_d</tt> directive
was there already when I found Spirit and I just used it. But the
<tt>min_limit_d</tt> directive is my invention.</p>

<p>Even though &ldquo;invention&rdquo; does not really mean that I
wrote the code or had the idea. To be perfectly honest, Joel had
the idea and wrote the code. I just used them.</p>

<p>After he told me: &ldquo;Peter, why don't you use the
<tt>limit_d</tt> directives? This would make your parser simpler
...&rdquo; and so on.</p>

<p>Alright, maybe the people who think I am an idiot are right.</p>

<p>Anyhow, the <tt>time</tt> rule is pretty obious. Again I
violated RFC822 knowingly and withouth remorse: According to the
RFC, the seconds part of <tt>time</tt> must be provided, but my
parser treats it as optional. (To make matters worse, I hereby
solemnly declare that I have the full intention of making the whole
<tt>time</tt> part optional later when the assemble the complete
parser.!)</p>

<p>Now that all the components are there, we can write down the
complete parser fairly easily:</p>

<div class="figure"><a name="id2774319"></a>
<p class="title"><b>Figure&nbsp;1.&nbsp;The RFC822 Date And Time
Specification Parser</b></p>

<pre class="programlisting">
struct rfcdate_parser : public boost::spirit::grammar&lt;rfcdate_parser&gt;
    {
    rfcdate_parser()
        {
        }
    template&lt;typename scannerT&gt;
    struct definition
        {
        definition(const rfcdate_parser&amp; self)
            {
            using namespace boost::spirit;

            first =
                (
                    date_time = !(    lexeme_d
                                      [
                                          as_lower_d
                                          [
                                              wday_p
                                          ]
                                      ]
                                      &gt;&gt; ','
                                 )
                                 &gt;&gt; date
                                 &gt;&gt; !time
                                 &gt;&gt; !zone,

                    date      =  uint_p
                                 &gt;&gt; lexeme_d
                                    [
                                        as_lower_d
                                        [
                                            month_p
                                        ]
                                    ]
                                 &gt;&gt; (    limit_d(0u, 99u)
                                         [
                                             uint_p
                                         ]
                                    |    min_limit_d(1900u)
                                         [
                                             uint_p
                                         ]
                                    ),

                    time      = uint_p
                                &gt;&gt; ':'
                                &gt;&gt; uint_p
                                &gt;&gt; !(
                                        ':'
                                        &gt;&gt; uint_p
                                    ),

                    zone      = ch_p('+')  &gt;&gt;  uint4_p
                              | ch_p('-')  &gt;&gt;  uint4_p
                              | lexeme_d
                                [
                                    as_lower_d
                                    [
                                        timezone_p
                                    ]
                                ]
                );
            }
        const boost::spirit::rule&lt;scannerT&gt;&amp; start() const
            {
            return first;
            }
        boost::spirit::subrule&lt;0&gt; date_time;
        boost::spirit::subrule&lt;1&gt; date;
        boost::spirit::subrule&lt;2&gt; time;
        boost::spirit::subrule&lt;3&gt; zone;
        boost::spirit::uint_parser&lt;int, 10, 4, 4&gt;  uint4_p;
        boost::spirit::rule&lt;scannerT&gt; first;
        };
    };
const rfcdate_parser rfcdate_p;
</pre>
</div>

<p>So after all, a <tt>date_time</tt> is made up of an optional
weekday, followed by the date (day, month, year), optionally
followed by the time (hours, minutes, optionally seconds),
optionally followed by the timezone. I guess you can see how easily
this parser can be modified to understand other formats as well!
Modifying this grammar to deal with ISO, ASN.1, or HTTP header
dates is a matter of minutes, not hours.</p>
</div>

<div class="sect1">
<div class="titlepage">
<div>
<h2 class="title" style="clear: both"><a name="id2774607"></a>White
Space, Comments, And Other Non-Sense</h2>
</div>
</div>

<p>In <a href="#intro" title="What Makes An RFC822 Date">the
section called &ldquo;What Makes An RFC822 Date&rdquo;</a>, I
already mentioned that RFC822 allows for white space and comments
to be added between valid tokens, and that the parser is supposed
to ignore this. The grammar, as it is so far, does not account for
that fact. Curiously enough, it does not seem to care about white
space at all! The reason for that is that we can solve this whole
stuff-ignoring business using a nifty mechanism of the Spirit
Parser Framework: The &ldquo;skipper&rdquo; or, more accurately,
the &ldquo;skip parser&rdquo;.</p>

<p>As you might remember, skip parsers were mentioned above
already, when I discussed the <tt>lexeme_d</tt> directive, which
disables them. A skip parser is a full-blown Spirit parser, but it
is not inteded to produce any results. Instead, it is inteded to
identify any parts of the input that do not produce any result ---
which ought to be skipped. (Surprise!) One of the most commonly
used skip parsers is the <tt>space_p</tt>, which comes with Spirit
already.</p>

<p>Unfortunately, <tt>space_p</tt> does not suffice for our needs.
It does skip blanks, admitted, but RFC822 allows for continued
white space and comments as well, and these, the <tt>space_p</tt>
parser cannot handle. So we have to write a skipper of our own.</p>

<p>But before we do, one more word about how the
&ldquo;normal&rdquo; parser and the skip parser interact: When
<tt>boost::spirit::parse</tt> has been called with a skip parser as an
additional argument, it will invoke the normal parser and the skip
parser alternately, starting with the skip parser. If the
characters of the input are matched by the skip parser, they are
ignored --- the normal parser will never see them. Only when the
skip parser does <span class="emphasis"><em>not</em></span> match
anymore will the normal parser be invoked. The normal parser will
then match one token on the input stream (unless the skipper is
disabled in the parser's grammar using <tt>lexme_d</tt>), and then
the skip parser is invoked again. You can observe this behavior
nicely, when you use a simple grammar and a skip parser in <a href=
"../../../doc/debugging.html" target="_top">debug mode</a>.</p>

<p>This behavior is, by the way, responsible for an interesting
effect that many new users (including me) trip over when they see
it the first time. Try to guess, what this program prints as
output:</p>

<div class="informalexample">
<pre class="programlisting">
#include &lt;boost/spirit/core.hpp&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;

using namespace std;
using namespace boost::spirit;

int main(int, char**)
    {
    string result;
    parse(" foobar ", str_p("foobar") [assign(result)], space_p);
    cout &lt;&lt; "The result is '" &lt;&lt; result &lt;&lt; "'\n";
    return 0;
    }
</pre>
</div>

<p>That's obvious ... <tt>'foobar'</tt>, right? Unfortunately not,
the output is <tt>'foobar '</tt>! The reason is that after the
<tt>str_p</tt> parser returs, the skip parser is invoked one more
time and matches the trailing blank.</p>

<p>To be continued ...</p>
</div>

<div class="sect1">
<div class="titlepage">
<div>
<h2 class="title" style="clear: both"><a name=
"id2774698"></a>Returning A Result From The Parser</h2>
</div>
</div>

<p>To be written.</p>
</div>
</div>
</body>
</html>

