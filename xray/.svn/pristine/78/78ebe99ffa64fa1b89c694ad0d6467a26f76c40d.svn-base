<html>
<head>
<title>Predefined Actions</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="theme/style.css" type="text/css">
</head>

<body>
<table width="100%" border="0" background="theme/bkd2.gif" cellspacing="2">
  <tr>
    <td width="10">
    </td>
    <td width="85%"> <font size="6" face="Verdana, Arial, Helvetica, sans-serif"><b>Predefined 
      Actions</b></font> </td>
    <td width="112"><a href="http://spirit.sf.net"><img src="theme/spirit.gif" width="112" height="48" align="right" border="0"></a></td>
  </tr>
</table>
<br>
<table border="0">
  <tr>
    <td width="10"></td>
    <td width="30"><a href="../index.html"><img src="theme/u_arr.gif" border="0"></a></td>
    <td width="30"><a href="semantic_actions.html"><img src="theme/l_arr.gif" border="0"></a></td>
    <td width="20"><a href="indepth_the_parser.html"><img src="theme/r_arr.gif" border="0"></a></td>
   </tr>
</table>
<p>The framework has two predefined semantic action functors. Experience shows
  that these functors are so often used that they were included as part of the
  core framework to spare the user from having to reinvent the same functionality
  over and over again.</p>
<h3>assign(v)</h3>
<p>Assign the value passed by the parser to the variable <tt>v</tt>.</p>
<p>Example usage:</p>
<pre><code><font color="#000000"><span class=special>    </span><span class=keyword>int </span><span class=identifier>i</span><span class=special>;
    </span><span class=identifier>std</span><span class=special>::</span><span class=identifier>string </span><span class=identifier>s</span><span class=special>;
    </span><span class=identifier>r </span><span class=special>= </span><span class=identifier>int_p</span><span class=special>[</span><span class=identifier>assign</span><span class=special>(</span><span class=identifier>i</span><span class=special>)] </span><span class=special>&gt;&gt; </span><span class=special>(+</span><span class=identifier>alpha_p</span><span class=special>)[</span><span class=identifier>assign</span><span class=special>(</span><span class=identifier>s</span><span class=special>)];</span></font></code></pre>
<p>Given an input <tt>123456 &quot;Hello&quot;</tt>, <tt>assign(i)</tt> will extract
  the number <tt>123456</tt> and assign it to <tt>i</tt>, then, <tt>assign(s)</tt>
  will extract the string <tt>&quot;Hello&quot;</tt> and assign it to <tt>s</tt>.
  Technically, the expression <tt>assign(v)</tt> is a template function that generates
  a semantic action. The semantic action generated is polymorphic and should work
  with any type as long as it is compatible with the arguments received from the
  parser. It might not be obvious, but a string can accept the iterator <tt>first</tt>
  and <tt>last</tt> arguments that are passed into a generic semantic action (see
  above). In fact, any STL container that has an <tt>assign(first, last)</tt>
  member function can be used.</p>
<p>For reference and to aid users in writing their own semantic action functors,
  here's the implementation of the <tt>assign(v)</tt> action. We include it here since
  it is short and simple enough to understand.</p>
<p><b>The assign_actor class</b></p>
<pre><code><font color="#000000"><span class=special>    </span><span class=keyword>template </span><span class=special>&lt;</span><span class=keyword>typename </span><span class=identifier>T</span><span class=special>&gt;
    </span><span class=keyword>class </span><span class=identifier>assign_actor
    </span><span class=special>{
    </span><span class=keyword>public</span><span class=special>:

        </span><span class=keyword>explicit
        </span><span class=identifier>assign_actor</span><span class=special>(</span><span class=identifier>T</span><span class=special>& </span><span class=identifier>ref_</span><span class=special>)
        </span><span class=special>: </span><span class=identifier>ref</span><span class=special>(</span><span class=identifier>ref_</span><span class=special>) </span><span class=special>{}

        </span><span class=keyword>template </span><span class=special>&lt;</span><span class=keyword>typename </span><span class=identifier>T2</span><span class=special>&gt;
        </span><span class=keyword>void </span><span class=keyword>operator</span><span class=special>()(</span><span class=identifier>T2 </span><span class=keyword>const</span><span class=special>& </span><span class=identifier>val</span><span class=special>) </span><span class=keyword>const
        </span><span class=special>{ </span><span class=identifier>ref </span><span class=special>= </span><span class=identifier>val</span><span class=special>; </span><span class=special>}

        </span><span class=keyword>template </span><span class=special>&lt;</span><span class=keyword>typename </span><span class=identifier>IteratorT</span><span class=special>&gt;
        </span><span class=keyword>void
        </span><span class=keyword>operator</span><span class=special>()(</span><span class=identifier>IteratorT </span><span class=keyword>const</span><span class=special>& </span><span class=identifier>first</span><span class=special>, </span><span class=identifier>IteratorT </span><span class=keyword>const</span><span class=special>& </span><span class=identifier>last</span><span class=special>) </span><span class=keyword>const
        </span><span class=special>{ </span><span class=identifier>ref</span><span class=special>.</span><span class=identifier>assign</span><span class=special>(</span><span class=identifier>first</span><span class=special>, </span><span class=identifier>last</span><span class=special>); </span><span class=special>}

    </span><span class=keyword>private</span><span class=special>:

        </span><span class=identifier>T</span><span class=special>& </span><span class=identifier>ref</span><span class=special>;
    </span><span class=special>};</span></font></code></pre>
<p><b>The assign function</b></p>
<pre><code><font color="#000000"><span class=special>    </span><span class=keyword>template </span><span class=special>&lt;</span><span class=keyword>typename </span><span class=identifier>T</span><span class=special>&gt;
    </span><span class=keyword>inline </span><span class=identifier>assign_actor</span><span class=special>&lt;</span><span class=identifier>T</span><span class=special>&gt; </span><span class=keyword>const
    </span><span class=identifier>assign</span><span class=special>(</span><span class=identifier>T</span><span class=special>& </span><span class=identifier>t</span><span class=special>)
    </span><span class=special>{
        </span><span class=keyword>return </span><span class=identifier>assign_actor</span><span class=special>&lt;</span><span class=identifier>T</span><span class=special>&gt;(</span><span class=identifier>t</span><span class=special>);
    </span><span class=special>}</span></font></code></pre>
<h3>append(c)</h3>
<p>Append the value passed by the parser to the container <tt>c</tt>.</p>
<p>Example usage:</p>
<pre><code><font color="#000000"><span class=special>    </span><span class=identifier>std</span><span class=special>::</span><span class=identifier>vector</span><span class=special>&lt;</span><span class=keyword>int</span><span class=special>&gt; </span><span class=identifier>v</span><span class=special>;
    </span><span class=identifier>r </span><span class=special>= </span><span class=identifier>int_p</span><span class=special>[</span><span class=identifier>append</span><span class=special>(</span><span class=identifier>v</span><span class=special>)] </span><span class=special>&gt;&gt; </span><span class=special>*(</span><span class=literal>',' </span><span class=special>&gt;&gt; </span><span class=identifier>int_p</span><span class=special>[</span><span class=identifier>append</span><span class=special>(</span><span class=identifier>v</span><span class=special>)]);</span></font></code></pre>
<p>The code above can parse a comma separated list of integers and stuff the numbers 
  in the vector <tt>v</tt>. If it isn't obvious already, <tt>append(c)</tt> appends 
  the parsed value (the argument passed into the semantic action by the parser) 
  into the container <tt>c</tt>, which must have member functions <tt>insert(where, 
  value)</tt> and <tt>end()</tt>. To cut the story short, STL containers are perfect 
  candidates for <tt>append(c)</tt> to work on. Like <tt>assign(v)</tt>, <tt>append(c)</tt> 
  may also take in the iterator pairs. In which case, the container must have 
  two member functions: <tt>insert(where, first, last)</tt> and <tt>end()</tt>; 
  e.g. <tt>std::vector&lt;std::string&gt;</tt>.</p>
<table border="0">
  <tr>
    <td width="10"></td>
    <td width="30"><a href="../index.html"><img src="theme/u_arr.gif" border="0"></a></td>
    <td width="30"><a href="semantic_actions.html"><img src="theme/l_arr.gif" border="0"></a></td>
    <td width="20"><a href="indepth_the_parser.html"><img src="theme/r_arr.gif" border="0"></a></td>
  </tr>
</table>
<br>
<hr size="1">
<p class="copyright">Copyright &copy; 1998-2003 Joel de Guzman<br>
  <br>
  <font size="2">Permission to copy, use, modify, sell and distribute this document 
  is granted provided this copyright notice appears in all copies. This document 
  is provided &quot;as is&quot; without express or implied warranty, and with 
  no claim as to its suitability for any purpose.</font></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>
</html>
