<html>
<head>
<title>FAQ</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="theme/style.css" type="text/css">
</head>

<body>
<table width="100%" border="0" background="theme/bkd2.gif" cellspacing="2">
  <tr> 
    <td width="10"> 
    </td>
    <td width="85%"> <font size="6" face="Verdana, Arial, Helvetica, sans-serif"><b>FAQ</b></font></td>
    <td width="112"><a href="http://spirit.sf.net"><img src="theme/spirit.gif" width="112" height="48" align="right" border="0"></a></td>
  </tr>
</table>
<br>
<table border="0">
  <tr>
    <td width="10"></td>
    <td width="30"><a href="../index.html"><img src="theme/u_arr.gif" border="0"></a></td>
    <td width="30"><a href="style_guide.html"><img src="theme/l_arr.gif" border="0"></a></td>
    <td width="20"><a href="rationale.html"><img src="theme/r_arr.gif" border="0"></a></td>
   </tr>
</table>
<ul>
  <li><a href="#scanner_business">The Scanner Business</a></li>
  <li><a href="#left_recursion">Eliminating Left Recursion</a> </li>
  <li><a href="#lexeme_and_rules">The lexeme_d directive and rules</a></li>
  <li><a href="#kleene_star">Kleene Star infinite loop</a></li>
  <li><a href="#CVS">Boost CVS and Spirit CVS</a></li>
</ul>
<p><b> <a name="scanner_business" id="scanner_business"></a> The Scanner Business</b></p>
<p><font color="#FF0000">Question:</font> Why doesn't this compile?</p>
<pre><code><font color="#000000"><span class=special>    </span><span class=identifier>rule</span><span class=special>&lt;&gt; </span><span class=identifier>r </span><span class=special>= /*...*/;
</span>    <span class=identifier>parse</span><span class=special>(</span><span class=string>"hello world"</span><span class=special>, </span><span class=identifier>r</span><span class=special>, </span><span class=identifier>space_p</span><span class=special>); </span><span class=comment>// BAD [attempts phrase level parsing]</span></font></code></pre>
<p>But if I <font color="#000000">remove the skip-parser, everything goes back 
  to normal again:<code></code></font></p>
<pre><code><font color="#000000">    <span class=identifier>rule</span><span class=special>&lt;&gt; </span><span class=identifier>r </span><span class=special>= *</span><span class=identifier>anychar_p</span><span class=special>;
    </span><span class=identifier>parse</span><span class=special>(</span><span class=string>"hello world"</span><span class=special>, </span><span class=identifier>r</span><span class=special>); </span><span class=comment>// OK [character level parsing]</span></font></code></pre>
<p>Sometimes you'll want to pass in a rule to one of the functions parse functions 
  that Spirit provides. The problem is that the rule is a template class that 
  is parameterized by the scanner type. This is rather awkward but unavoidable: 
  <strong>the rule is tied to a scanner</strong>. What's not obvious is that this 
  scanner must be compatible with the scanner that is ultimately passed to the 
  rule's parse member function. Otherwise, the compiler will complain. </p>
<p>Why does the first call to parse not compile? Because of scanner incompatibility. 
  Behind the scenes, the free parse function creates a scanner from the iterators 
  passed in. In the first call to parse, the scanner created is a plain vanilla 
  <tt>scanner&lt;&gt;</tt>. This is compatible with the default scanner type of 
  <tt>rule&lt;&gt;</tt> [see default template parameters of <a href="rule.html">the 
  rule</a>]. The second call creates a scanner of type <tt>phrase_scanner_t</tt>:</p>
<pre><span class=special>    </span><span class=keyword>typedef </span><span class=identifier>skipper_iteration_policy</span><span class=special>&lt;&gt;                  </span><span class=identifier>iter_policy_t</span><span class=special>;
    </span><span class=keyword>typedef </span><span class=identifier>scanner_policies</span><span class=special>&lt;</span><span class=identifier>iter_policy_t</span><span class=special>&gt;             </span><span class=identifier>scanner_policies_t</span><span class=special>;
    </span><span class=keyword>typedef </span><span class=identifier>scanner</span><span class=special>&lt;</span><span class=keyword>char </span><span class=keyword>const</span><span class=special>*, </span><span class=identifier>scanner_policies_t</span><span class=special>&gt;    </span><span class=identifier>phrase_scanner_t</span><span class=special>;</span></pre>
<p>Thus, in order for the second call to succeed, the rule must be parameterized 
  as <tt>rule&lt;phrase_scanner_t&gt;</tt>:</p>
<pre><code><font color="#000000"><span class=comment>    </span><span class=identifier>rule</span><span class=special>&lt;</span><span class=identifier>phrase_scanner_t</span><span class=special>&gt; </span><span class=identifier>r </span><span class=special>= </span><span class=special>*</span><span class=identifier>anychar_p</span><span class=special>;
    </span><span class=identifier>parse</span><span class=special>(</span><span class=string>"hello world"</span><span class=special>, </span><span class=identifier>r</span><span class=special>, </span><span class=identifier>space_p</span><span class=special>);       </span><span class=comment>//  OK [phrase level parsing]</span></font></code></pre>
<p>Take note however that <tt>phrase_scanner_t</tt> is compatible only when you 
  are using <tt>char const*</tt> iterators and <tt>space_p</tt> as the skip parser. 
  Other than that, you'll have to find the right type of scanner. This is tedious 
  to do correctly. In light of this issue, <strong>it is best to avoid rules as 
  arguments to the parse functions</strong>. Keep in mind that this happens only 
  with rules. The rule is the only parser that has to be tied to a particular 
  scanner type. For instance:</p>
<pre><span class=comment>    </span><span class=identifier>parse</span><span class=special>(</span><span class=string>"hello world"</span><span class=special>, *</span><span class=identifier>anychar_p</span><span class=special>);           </span><span class=comment><code><font color="#000000"><span class=comment>//  OK  [character level parsing</span></font></code>]
    </span><span class=identifier>parse</span><span class=special>(</span><span class=string>"hello world"</span><span class=special>, *</span><span class=identifier>anychar_p</span><span class=special>, </span><span class=identifier>space_p</span><span class=special>);  </span><span class="comment">//  OK  [phrase level parsing</span></pre>
<p><b> <a name="left_recursion" id="left_recursion"></a> Eliminating Left 
  Recursion </b></p>
<p><font color="#FF0000">Question:</font> I ported a grammar from YACC. It's &quot;kinda&quot; 
  working - the parser itself compiles with no errors. But when I try to parse, 
  it gives me an &quot;invalid page fault&quot;. I tracked down the problem to 
  this grammar snippet:</p>
<pre>    <span class=identifier>or_expr </span><span class=special>= </span><span class=identifier>xor_expr </span><span class=special>| (</span><span class=identifier>or_expr </span><span class=special>&gt;&gt; </span><span class=identifier>VBAR </span><span class=special>&gt;&gt; </span><span class=identifier>xor_expr</span><span class=special>);</span></pre>
<p>What you should do is to elliminate direct and indirect left-recursion. This 
  causes the invalid page fault because the program enters an infinite loop. The 
  code above is good for bottom up parsers such as YACC but not for LL parsers 
  such as Spirit.</p>
<p>This is similar to a rule in Hartmut Kaiser's <a href="../example/application/c/c_grammar.cpp">C 
  parser</a> in the examples/applications.</p>
<pre>
    <span class=identifier>inclusive_or_expression
    </span><span class=special>= </span><span class=identifier>exclusive_or_expression
    </span><span class=special>| </span><span class=identifier>inclusive_or_expression </span><span class=special>&gt;&gt; </span><span class=identifier>OR </span><span class=special>&gt;&gt; </span><span class=identifier>exclusive_or_expression
    </span><span class=special>;</span></pre>
<p><span class=special></span>Transforming left recursion to right recursion, 
  we have:</p>
<pre>    <span class=identifier>inclusive_or_expression
    </span><span class=special>= </span><span class=identifier>exclusive_or_expression </span><span class=special>&gt;&gt; </span><span class=identifier>inclusive_or_expression_helper
    </span><span class=special>;

    </span><span class=identifier>inclusive_or_expression_helper
    </span><span class=special>= </span><span class=identifier>OR </span><span class=special>&gt;&gt; </span><span class=identifier>exclusive_or_expression </span><span class=special>&gt;&gt; </span><span class=identifier>inclusive_or_expression_helper
    </span><span class=special>| </span><span class=identifier>epsilon_p
    </span><span class=special>;</span></pre>
<p><span class=special></span>I'd go further. Since:</p>
<pre>    <span class=identifier>r </span><span class=special>= </span><span class=identifier>a </span><span class=special>| </span><span class=identifier>epsilon_p</span><span class=special>;</span></pre>
<p><span class=special></span>is equivalent to:<span class=special><br>
  </span></p>
<pre>    <span class=identifier>r </span><span class=special>= !</span><span class=identifier>a</span><span class=special>;</span></pre>
<p>we can simplify <tt>inclusive_or_expression_helper</tt> thus:</p>
<pre>    <span class=identifier>inclusive_or_expression_helper
    </span><span class=special>= !(</span><span class=identifier>OR </span><span class=special>&gt;&gt; </span><span class=identifier>exclusive_or_expression </span><span class=special>&gt;&gt; </span><span class=identifier>inclusive_or_expression_helper</span><span class=special>)
    ;</span></pre>
<p><span class=special></span>Now, since:</p>
<pre>    <span class=identifier>r </span><span class=special>= !(</span><span class=identifier>a </span><span class=special>&gt;&gt; </span><span class=identifier>r</span><span class=special>);</span></pre>
<p><span class=special></span>is equivalent to:</p>
<pre>    <span class=identifier>r </span><span class=special>= *</span><span class=identifier>a</span><span class=special>;</span></pre>
<p><span class=special></span>we have:</p>
<pre>    <span class=identifier>inclusive_or_expression_helper
    </span><span class=special>= *(</span><span class=identifier>OR </span><span class=special>&gt;&gt; </span><span class=identifier>exclusive_or_expression</span><span class=special>)
    ;</span></pre>
<p><span class=special></span>Now simplifying <tt>inclusive_or_expression</tt> 
  fully, we have:</p>
<pre>    <span class=identifier>inclusive_or_expression
    </span><span class=special>= </span><span class=identifier>exclusive_or_expression </span><span class=special>&gt;&gt; *(</span><span class=identifier>OR </span><span class=special>&gt;&gt; </span><span class=identifier>exclusive_or_expression</span><span class=special>)
    ;</span></pre>
<p><span class=special></span>Reminds me of the calculators. So in short:</p>
<pre>    <span class=identifier>a </span><span class=special>= </span><span class=identifier>b </span><span class=special>| </span><span class=identifier>a </span><span class=special>&gt;&gt; </span><span class=identifier>op </span><span class=special>&gt;&gt; </span><span class=identifier>b</span><span class=special>;</span></pre>
<p><span class=special></span><span class=identifier>in </span><span class=identifier>pseudo-YACC 
  </span><span class=identifier>is</span><span class=special>:</span></p>
<pre>    <span class=identifier>a </span><span class=special>= </span><span class=identifier>b </span><span class=special>&gt;&gt; *(</span><span class=identifier>op </span><span class=special>&gt;&gt; </span><span class=identifier>b</span><span class=special>);</span></pre>
<p><span class=special></span>in Spirit. What could be simpler? Look Ma, no recursion, 
  just iteration.</p>
<p><b> <a name="lexeme_and_rules" id="lexeme_and_rules"></a> The lexeme_d directive 
  and rules</b></p>
<p> <font color="#FF0000">Question:</font> Does lexeme_d not support expressions 
  which include rules? In the example below, the definition of atomicRule compiles, 
</p>
<pre>    <span class=identifier></span><span class=identifier>rule</span><span class=special>&lt;</span><span class=identifier>ScannerT</span><span class=special>&gt; </span><span class=identifier>atomicRule</span>
        <span class=special>= </span><span class=identifier>lexeme_d</span><span class=special>[(</span><span class=identifier>alpha_p </span><span class=special>| </span><span class=literal>'_'</span><span class=special>) &gt;&gt; *(</span><span class=identifier>alnum_p </span><span class=special>| </span><span class=literal>'.' </span><span class=special>| </span><span class=literal>'-' </span><span class=special>| </span><span class=literal>'_'</span><span class=special>)];</span></pre>
<p>but if I move <tt>alnum_p | '.' | '-' | '_'</tt> into its own rule, the compiler 
  complains about conversion from <tt>const scanner&lt;...&gt;</tt> to <tt>const 
  phrase_scaner_t&amp;</tt>. </p>
<pre>    <span class=identifier>rule</span><span class=special>&lt;</span><span class=identifier>ScannerT</span><span class=special>&gt; </span><span class=identifier>ch </span><span class=special>
        = </span><span class=identifier>alnum_p </span><span class=special>| </span><span class=literal>'.' </span><span class=special>| </span><span class=literal>'-' </span><span class=special>| </span><span class=literal>'_'</span><span class=special>;</span>

<span class=identifier>    rule</span><span class=special>&lt;</span><span class=identifier>ScannerT</span><span class=special>&gt; </span><span class=identifier>compositeRule</span>
        <span class=special>= </span><span class=identifier>lexeme_d</span><span class=special>[(</span><span class=identifier>alpha_p </span><span class=special>| </span><span class=literal>'_'</span><span class=special>) &gt;&gt; *(</span><span class=identifier>ch</span><span class=special>)]; </span><span class="comment">// &lt;- error source</span></pre>
<p>You might get the impression that the <tt>lexeme_d</tt> directive and rules 
  do not mix. Actually, this problem is related the the first FAQ entry: The Scanner 
  Business. More precisely, the <tt>lexeme_d</tt> directive and rules with incompatible 
  scanner types do not mix. This problem is more subtle. What's causing the scanner 
  incompatibility is the directive itself. The <tt>lexeme_d</tt> directive transforms 
  the scanner it receives into something that disables the skip parser. This non-skipping 
  scanner, unfortunately, is incompatible with the original scanner before transformation 
  took place.</p>
<p>The simplest solution is not to use rules in the <tt>lexeme_d</tt>. Instead, 
  you can definitely apply <tt>lexeme_d</tt> to subrules and grammars if you really 
  need more complex parsers inside the <tt>lexeme_d</tt>. If you really must use 
  a rule, you need to know the exact scanner used by the directive. The <tt>lexeme_scanner</tt> 
  metafunction is your friend here. The example above will work as expected once 
  we give the <tt>ch</tt> rule a correct scanner type:</p>
<pre>    <span class=identifier>rule</span><span class=special>&lt;</span><span class=identifier>lexeme_scanner</span><span class="special">&lt;</span><span class=identifier>ScannerT</span><span class=special>&gt;::</span><span class="identifier">type</span><span class=special>&gt; </span><span class=identifier>ch </span><span class=special>
        = </span><span class=identifier>alnum_p </span><span class=special>| </span><span class=literal>'.' </span><span class=special>| </span><span class=literal>'-' </span><span class=special>| </span><span class=literal>'_'</span><span class=special>;</span></pre>
<p>Note: make sure to add &quot;<tt>typename</tt>&quot; before <tt>lexeme_scanner</tt> 
  when this is used inside a template class or function.</p>
<p>The same thing happens when rules are used inside the <tt>as_lower_d</tt> directive. 
  In such cases, you can use the <tt>as_lower_scanner</tt>. See the <span class=identifier><tt><a href="scanner.html#lexeme_scanner">lexeme_scanner</a></tt></span> 
  and <tt><a href="scanner.html#as_lower_scanner">as_lower_scanner</a></tt>.</p>
<p><strong><a name="kleene_star"></a>Kleene Star infinite loop</strong></p>
<p><font color="#FF0000">Question</font>: Why Does This Loop Forever?</p>
<pre>    <span class=identifier>rule</span><span class=special>&lt;&gt; </span><span class=identifier>optional </span><span class=special>= !(</span>str_p<span class="special">(</span><span class="string">&quot;optional&quot;</span><span class="special">));
    </span><span class=identifier>rule</span><span class=special>&lt;&gt; </span><span class="identifier">list_of_optional </span><span class=special>= *</span><span class=identifier>optional</span><span class="special">;</span></pre>
<p>The problem with this is that the kleene star will continue looping until it 
  gets a no-match from it's enclosed parser. Because the <tt>optional</tt> rule 
  is optional, it will always return a match. Even if the input doesn't match 
  &quot;optional&quot; it will return a zero length match. <tt>list_of_optional</tt> 
  will keep calling optional forever since optional will never return a no-match. 
  So in general, any rule that can be &quot;nullable&quot; (meaning it can return 
  a zero length match) must not be put inside a kleene star.</p>
<p><strong><a name="CVS"></a>Boost CVS and Spirit CVS</strong></p>
<p><font color="#FF0000">Question:</font> There is Boost CVS and Spirit CVS. Which 
  is used for further development of Spirit?</p>
<p> Generally, development takes place in Spirit's CVS. However, from time to 
  time a new version of Spirit will be integrated in Boost. When this happens 
  development takes place in the Boost CVS. There will be announcements on the 
  Spirit mailing lists whenever the status of the Spirit CVS changes.<br>
</p>
<table border="0">
  <tr> 
    <td width="10"></td>
    <td width="30"><a href="../index.html"><img src="theme/u_arr.gif" border="0"></a></td>
    <td width="30"><a href="style_guide.html"><img src="theme/l_arr.gif" border="0"></a></td>
    <td width="20"><a href="rationale.html"><img src="theme/r_arr.gif" border="0"></a></td>
  </tr>
</table>
<br>
<hr size="1">
<p class="copyright">Copyright &copy; 1998-2003 Joel de Guzman<br>
  <br>
  <font size="2">Permission to copy, use, modify, sell and distribute this document 
  is granted provided this copyright notice appears in all copies. This document 
  is provided &quot;as is&quot; without express or implied warranty, and with 
  no claim as to its suitability for any purpose.</font></p>
<p class="copyright">&nbsp;</p>
</body>
</html>
