<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
 
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 
  <meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
  <title>Matrix</title>
</head>
  <body bgcolor="#ffffff">
  
<h1><img src="c++boost.gif" alt="c++boost.gif" align="Center">
Matrix</h1>
  
<h2><a name="matrix"></a>
Matrix</h2>
  
<h4>Description</h4>
  
<p>The templated class <code>matrix&lt;T, F, A&gt; </code>is the base container
adaptor for dense matrices. For a <em>(m x n</em>)-dimensional matrix and
<em>0 &lt;= i &lt; m</em>,<em> 0 &lt;= j &lt; n</em> every element <em>m</em><sub><em>
i, j</em></sub> is mapped to the <em>(i x n + j)-</em>th element of the container
for row major orientation or the <em>(i + j x m)-</em>th element of the container
for column major orientation.</p>
  
<h4>Example</h4>
  
<pre>#include &lt;boost/numeric/ublas/matrix.hpp&gt;<br>#include &lt;boost/numeric/ublas/io.hpp&gt;<br><br>int main () {<br>    using namespace boost::numeric::ublas;<br>    matrix&lt;double&gt; m (3, 3);<br>    for (unsigned i = 0; i &lt; m.size1 (); ++ i)<br>        for (unsigned j = 0; j &lt; m.size2 (); ++ j)<br>            m (i, j) = 3 * i + j;<br>    std::cout &lt;&lt; m &lt;&lt; std::endl;<br>}<br></pre>
<h4>Definition</h4>
  
<p>Defined in the header matrix.hpp.</p>
  
<h4>Template parameters</h4>
  
<table border="1">
     <tbody>
    <tr>
         <th>Parameter </th>
         <th>Description </th>
         <th>Default </th>
     </tr>
     <tr>
         <td><code>T</code> </td>
         <td>The type of object stored in the matrix. </td>
         <td>&nbsp;</td>
     </tr>
     <tr>
         <td><code>F</code></td>
         <td>Functor describing the storage organization. <a href="#matrix_1">
[1]</a>
      </td>
         <td><code>row_major</code></td>
     </tr>
     <tr>
         <td><code>A</code></td>
         <td>The type of the adapted array. <a href="#matrix_2">[2]</a>
      </td>
         <td><code>unbounded_array&lt;T&gt;</code></td>
     </tr>
 
  </tbody>
</table>
  
<h4>Model of</h4>
  
<p><a href="container.htm#matrix">Matrix</a>
. </p>
  
<h4>Type requirements</h4>
  
<p>None, except for those imposed by the requirements of <a href="container.htm#matrix">
Matrix</a>
.</p>
  
<h4>Public base classes</h4>
  
<p><code>matrix_expression&lt;matrix&lt;T, F, A&gt; &gt;</code> </p>
  
<h4>Members</h4>
  
<table border="1">
     <tbody>
    <tr>
         <th>Member </th>
         <th>Description </th>
     </tr>
     <tr>
         <td><code>matrix ()</code> </td>
         <td>Allocates an uninitialized <code>matrix </code>that        
holds zero rows of zero elements.</td>
     </tr>
     <tr>
         <td><code>matrix (size_type size1, size_type size2)</code></td>
         <td>Allocates an uninitialized <code>matrix </code>that        
holds <code>size1</code> rows of <code>size2</code>         elements.</td>
     </tr>
     <tr>
         <td><code>matrix (const matrix &amp;m)</code></td>
         <td>The copy constructor.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AE&gt;<br>
         matrix (const matrix_expression&lt;AE&gt; &amp;ae)</code></td>
         <td>The extended copy constructor.</td>
     </tr>
     <tr>
         <td><code>void resize (size_type size1, size_type size2)</code></td>
         <td>Reallocates a <code>matrix </code>to hold <code>size1</code>
         rows of <code>size2</code> elements. The content of the <code>matrix</code>
         is not preserved.</td>
     </tr>
     <tr>
         <td><code>size_type size1 () const</code></td>
         <td>Returns the number of rows. </td>
     </tr>
     <tr>
         <td><code>size_type size2 () const</code></td>
         <td>Returns the number of columns. </td>
     </tr>
     <tr>
         <td><code>const_reference operator () (size_type i,         size_type
j) const</code></td>
         <td>Returns a <code>const</code> reference of the <code>j</code>
-th         element in the <code>i</code>-th row. </td>
     </tr>
     <tr>
         <td><code>reference operator () (size_type i, size_type        
j)</code></td>
         <td>Returns a reference of the <code>j</code>-th element       
 in the <code>i</code>-th row. </td>
     </tr>
     <tr>
         <td><code>matrix &amp;operator = (const matrix &amp;m)</code></td>
         <td>The assignment operator.</td>
     </tr>
     <tr>
         <td><code>matrix &amp;assign_temporary (matrix &amp;m)</code></td>
         <td>Assigns a temporary. May change the matrix <code>m</code>.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AE&gt;<br>
         matrix &amp;operator = (const matrix_expression&lt;AE&gt;      
  &amp;ae)</code></td>
         <td>The extended assignment operator.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AE&gt;<br>
         matrix &amp;assign (const matrix_expression&lt;AE&gt;         &amp;ae)</code></td>
         <td>Assigns a matrix expression to the matrix. Left and        
right hand side of the assignment should be independent.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AE&gt;<br>
         matrix &amp;operator += (const         matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
         <td>A computed assignment operator. Adds the matrix         expression
to the matrix.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AE&gt;<br>
         matrix &amp;plus_assign (const         matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
         <td>Adds a matrix expression to the matrix. Left and         right
hand side of the assignment should be independent.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AE&gt;<br>
         matrix &amp;operator -= (const         matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
         <td>A computed assignment operator. Subtracts the matrix       
 expression from the matrix.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AE&gt;<br>
         matrix &amp;minus_assign (const         matrix_expression&lt;AE&gt;
&amp;ae)</code></td>
         <td>Subtracts a matrix expression from the matrix. Left        
and right hand side of the assignment should be         independent.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AT&gt;<br>
         matrix &amp;operator *= (const AT &amp;at)</code></td>
         <td>A computed assignment operator. Multiplies the matrix      
  with a scalar.</td>
     </tr>
     <tr>
         <td><code>template&lt;class AT&gt;<br>
         matrix &amp;operator /= (const AT &amp;at)</code></td>
         <td>A computed assignment operator. Divides the matrix         through
a scalar.</td>
     </tr>
     <tr>
         <td><code>void swap (matrix &amp;m)</code></td>
         <td>Swaps the contents of the matrices. </td>
     </tr>
     <tr>
         <td><code>void insert (size_type i, size_type j,         const_reference
t)</code></td>
         <td>Inserts the value <code>t</code> at the <code>j</code>-th  
      element of the <code>i</code>-th row.</td>
     </tr>
     <tr>
         <td><code>void erase (size_type i, size_type j)</code></td>
         <td>Erases the value at the <code>j</code>-th element of       
 the <code>i</code>-th row.</td>
     </tr>
     <tr>
         <td><code>void clear ()</code></td>
         <td>Clears the matrix.</td>
     </tr>
     <tr>
         <td><code>const_iterator1 begin1 () const</code></td>
         <td>Returns a <code>const_iterator1</code> pointing to         the
beginning of the <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator1 end1 () const</code></td>
         <td>Returns a <code>const_iterator1</code> pointing to         the
end of the <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>iterator1 begin1 () </code></td>
         <td>Returns a <code>iterator1</code> pointing to the         beginning
of the <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>iterator1 end1 () </code></td>
         <td>Returns a <code>iterator1</code> pointing to the end       
 of the <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator2 begin2 () const</code></td>
         <td>Returns a <code>const_iterator2</code> pointing to         the
beginning of the <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator2 end2 () const</code></td>
         <td>Returns a <code>const_iterator2</code> pointing to         the
end of the <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>iterator2 begin2 () </code></td>
         <td>Returns a <code>iterator2</code> pointing to the         beginning
of the <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>iterator2 end2 () </code></td>
         <td>Returns a <code>iterator2</code> pointing to the end       
 of the <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator1 rbegin1 () const</code></td>
         <td>Returns a <code>const_reverse_iterator1</code>         pointing
to the beginning of the reversed <code>matrix</code>.         </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator1 rend1 () const</code></td>
         <td>Returns a <code>const_reverse_iterator1</code>         pointing
to the end of the reversed <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>reverse_iterator1 rbegin1 () </code></td>
         <td>Returns a <code>reverse_iterator1</code> pointing to       
 the beginning of the reversed <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>reverse_iterator1 rend1 () </code></td>
         <td>Returns a <code>reverse_iterator1</code> pointing to       
 the end of the reversed <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator2 rbegin2 () const</code></td>
         <td>Returns a <code>const_reverse_iterator2</code>         pointing
to the beginning of the reversed <code>matrix</code>.         </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator2 rend2 () const</code></td>
         <td>Returns a <code>const_reverse_iterator2</code>         pointing
to the end of the reversed <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>reverse_iterator2 rbegin2 () </code></td>
         <td>Returns a <code>reverse_iterator2</code> pointing to       
 the beginning of the reversed <code>matrix</code>. </td>
     </tr>
     <tr>
         <td><code>reverse_iterator2 rend2 () </code></td>
         <td>Returns a <code>reverse_iterator2</code> pointing to       
 the end of the reversed <code>matrix</code>. </td>
     </tr>
 
  </tbody>
</table>
  
<h4>Notes</h4>
  
<p><a name="#matrix_1">[1]</a>
 Supported parameters for the storage organization are <code>row_major</code>
 and <code>column_major</code>.</p>
  
<p><a name="#matrix_2">[2]</a>
 Supported parameters for the adapted array are <code>unbounded_array&lt;T&gt;</code>
, <code>bounded_array&lt;T&gt;</code> and <code>std::vector&lt;T&gt;</code>
. </p>
  
<h4>Interface</h4>
  
<pre><code>    // Array based matrix class<br>    template&lt;class T, class F, class A&gt;<br>    class matrix:<br>        public matrix_expression&lt;matrix&lt;T, F, A&gt; &gt; {<br>    public:<br>        typedef std::size_t size_type;<br>        typedef std::ptrdiff_t difference_type;<br>        typedef T value_type;<br>        typedef const T &amp;const_reference;<br>        typedef T &amp;reference;<br>        typedef const T *const_pointer;<br>        typedef T *pointer;<br>        typedef F functor_type;<br>        typedef A array_type;<br>        typedef const A const_array_type;<br>        typedef const matrix&lt;T, F, A&gt; const_self_type;<br>        typedef matrix&lt;T, F, A&gt; self_type;<br>        typedef const matrix_const_reference&lt;const_self_type&gt; const_closure_type;<br>        typedef matrix_reference&lt;self_type&gt; closure_type;<br>        typedef typename A::const_iterator const_iterator_type;<br>        typedef typename A::iterator iterator_type;<br>        typedef dense_tag storage_category;<br>        typedef typename F::orientation_category orientation_category;<br><br>        // Construction and destruction<br>        matrix ();<br>        matrix (size_type size1, size_type size2);<br>        matrix (const matrix &amp;m);<br>        template&lt;class AE&gt;<br>        matrix (const matrix_expression&lt;AE&gt; &amp;ae);<br><br>        // Accessors<br>        size_type size1 () const;<br>        size_type size2 () const;<br>        const_array_type &amp;data () const;<br>        array_type &amp;data ();<br><br>        // Resizing<br>        void resize (size_type size1, size_type size2);<br><br>        // Element access<br>        const_reference operator () (size_type i, size_type j) const;<br>        reference operator () (size_type i, size_type j);<br><br>        // Assignment<br>        matrix &amp;operator = (const matrix &amp;m);<br>        matrix &amp;assign_temporary (matrix &amp;m);<br>        template&lt;class AE&gt;<br>        matrix &amp;operator = (const matrix_expression&lt;AE&gt; &amp;ae);<br>        template&lt;class AE&gt;<br>        matrix &amp;reset (const matrix_expression&lt;AE&gt; &amp;ae);<br>        template&lt;class AE&gt;<br>        matrix &amp;assign (const matrix_expression&lt;AE&gt; &amp;ae);<br>        template&lt;class AE&gt;<br>        matrix&amp; operator += (const matrix_expression&lt;AE&gt; &amp;ae);<br>        template&lt;class AE&gt;<br>        matrix &amp;plus_assign (const matrix_expression&lt;AE&gt; &amp;ae);<br>        template&lt;class AE&gt;<br>        matrix&amp; operator -= (const matrix_expression&lt;AE&gt; &amp;ae);<br>        template&lt;class AE&gt;<br>        matrix &amp;minus_assign (const matrix_expression&lt;AE&gt; &amp;ae);<br>        template&lt;class AT&gt;<br>        matrix&amp; operator *= (const AT &amp;at);<br>        template&lt;class AT&gt;<br>        matrix&amp; operator /= (const AT &amp;at);<br><br>        // Swapping<br>        void swap (matrix &amp;m);<br>        friend void swap (matrix &amp;m1, matrix &amp;m2);<br><br>        // Element insertion and erasure<br>        void insert (size_type i, size_type j, const_reference t);<br>        void erase (size_type i, size_type j);<br>        void clear ();<br><br>        class const_iterator1;<br>        class iterator1;<br>        class const_iterator2;<br>        class iterator2;<br>        typedef reverse_iterator_base1&lt;const_iterator1&gt; const_reverse_iterator1;<br>        typedef reverse_iterator_base1&lt;iterator1&gt; reverse_iterator1;<br>        typedef reverse_iterator_base2&lt;const_iterator2&gt; const_reverse_iterator2;<br>        typedef reverse_iterator_base2&lt;iterator2&gt; reverse_iterator2;<br><br>        // Element lookup<br>        const_iterator1 find1 (int rank, size_type i, size_type j) const;<br>        iterator1 find1 (int rank, size_type i, size_type j);<br>        const_iterator2 find2 (int rank, size_type i, size_type j) const;<br>        iterator2 find2 (int rank, size_type i, size_type j);<br>        const_iterator1 find_first1 (int rank, size_type i, size_type j) const;<br>        iterator1 find_first1 (int rank, size_type i, size_type j);<br>        const_iterator1 find_last1 (int rank, size_type i, size_type j) const;<br>        iterator1 find_last1 (int rank, size_type i, size_type j);<br>        const_iterator2 find_first2 (int rank, size_type i, size_type j) const;<br>        iterator2 find_first2 (int rank, size_type i, size_type j);<br>        const_iterator2 find_last2 (int rank, size_type i, size_type j) const;<br>        iterator2 find_last2 (int rank, size_type i, size_type j);<br><br>        // Iterators simply are pointers.<br><br>        class const_iterator1:<br>            public container_const_reference&lt;matrix&gt;,<br>            public random_access_iterator_base&lt;const_iterator1, value_type&gt; {<br>        public:<br>            typedef dense_random_access_iterator_tag iterator_category;<br>            typedef typename matrix::difference_type difference_type;<br>            typedef typename matrix::value_type value_type;<br>            typedef typename matrix::const_reference reference;<br>            typedef typename matrix::const_pointer pointer;<br>            typedef const_iterator2 dual_iterator_type;<br>            typedef const_reverse_iterator2 dual_reverse_iterator_type;<br><br>            // Construction and destruction<br>            const_iterator1 ();<br>            const_iterator1 (const matrix &amp;m, const const_iterator_type &amp;it);<br>            const_iterator1 (const iterator1 &amp;it);<br><br>            // Arithmetic<br>            const_iterator1 &amp;operator ++ ();<br>            const_iterator1 &amp;operator -- ();<br>            const_iterator1 &amp;operator += (difference_type n);<br>            const_iterator1 &amp;operator -= (difference_type n);<br>            difference_type operator - (const const_iterator1 &amp;it) const;<br><br>            // Dereference<br>            reference operator * () const;<br><br>            const_iterator2 begin () const;<br>            const_iterator2 end () const;<br>            const_reverse_iterator2 rbegin () const;<br>            const_reverse_iterator2 rend () const;<br><br>            // Indices<br>            size_type index1 () const;<br>            size_type index2 () const;<br><br>            // Assignment<br>            const_iterator1 &amp;operator = (const const_iterator1 &amp;it);<br><br>            // Comparison<br>            bool operator == (const const_iterator1 &amp;it) const;<br>            bool operator &lt;(const const_iterator1 &amp;it) const;<br>        };<br><br>        const_iterator1 begin1 () const;<br>        const_iterator1 end1 () const;<br><br>        class iterator1:<br>            public container_reference&lt;matrix&gt;,<br>            public random_access_iterator_base&lt;iterator1, value_type&gt; {<br>        public:<br>            typedef dense_random_access_iterator_tag iterator_category;<br>            typedef typename matrix::difference_type difference_type;<br>            typedef typename matrix::value_type value_type;<br>            typedef typename matrix::reference reference;<br>            typedef typename matrix::pointer pointer;<br>            typedef iterator2 dual_iterator_type;<br>            typedef reverse_iterator2 dual_reverse_iterator_type;<br><br>            // Construction and destruction<br>            iterator1 ();<br>            iterator1 (matrix &amp;m, const iterator_type &amp;it);<br><br>            // Arithmetic<br>            iterator1 &amp;operator ++ ();<br>            iterator1 &amp;operator -- ();<br>            iterator1 &amp;operator += (difference_type n);<br>            iterator1 &amp;operator -= (difference_type n);<br>            difference_type operator - (const iterator1 &amp;it) const;<br><br>            // Dereference<br>            reference operator * () const;<br><br>            iterator2 begin () const;<br>            iterator2 end () const;<br>            reverse_iterator2 rbegin () const;<br>            reverse_iterator2 rend () const;<br><br>            // Indices<br>            size_type index1 () const;<br>            size_type index2 () const;<br><br>            // Assignment<br>            iterator1 &amp;operator = (const iterator1 &amp;it);<br><br>            // Comparison<br>            bool operator == (const iterator1 &amp;it) const;<br>            bool operator &lt;(const iterator1 &amp;it) const;<br>        };<br><br>        iterator1 begin1 ();<br>        iterator1 end1 ();<br><br>        class const_iterator2:<br>            public container_const_reference&lt;matrix&gt;,<br>            public random_access_iterator_base&lt;const_iterator2, value_type&gt; {<br>        public:<br>            typedef dense_random_access_iterator_tag iterator_category;<br>            typedef typename matrix::difference_type difference_type;<br>            typedef typename matrix::value_type value_type;<br>            typedef typename matrix::const_reference reference;<br>            typedef typename matrix::const_pointer pointer;<br>            typedef const_iterator1 dual_iterator_type;<br>            typedef const_reverse_iterator1 dual_reverse_iterator_type;<br><br>            // Construction and destruction<br>            const_iterator2 ();<br>            const_iterator2 (const matrix &amp;m, const const_iterator_type &amp;it);<br>            const_iterator2 (const iterator2 &amp;it);<br><br>            // Arithmetic<br>            const_iterator2 &amp;operator ++ ();<br>            const_iterator2 &amp;operator -- ();<br>            const_iterator2 &amp;operator += (difference_type n);<br>            const_iterator2 &amp;operator -= (difference_type n);<br>            difference_type operator - (const const_iterator2 &amp;it) const;<br><br>            // Dereference<br>            reference operator * () const;<br><br>            const_iterator1 begin () const;<br>            const_iterator1 end () const;<br>            const_reverse_iterator1 rbegin () const;<br>            const_reverse_iterator1 rend () const;<br><br>            // Indices<br>            size_type index1 () const;<br>            size_type index2 () const;<br><br>            // Assignment<br>            const_iterator2 &amp;operator = (const const_iterator2 &amp;it);<br><br>            // Comparison<br>            bool operator == (const const_iterator2 &amp;it) const;<br>            bool operator &lt;(const const_iterator2 &amp;it) const;<br>        };<br><br>        const_iterator2 begin2 () const;<br>        const_iterator2 end2 () const;<br><br>        class iterator2:<br>            public container_reference&lt;matrix&gt;,<br>            public random_access_iterator_base&lt;iterator2, value_type&gt; {<br>        public:<br>            typedef dense_random_access_iterator_tag iterator_category;<br>            typedef typename matrix::difference_type difference_type;<br>            typedef typename matrix::value_type value_type;<br>            typedef typename matrix::reference reference;<br>            typedef typename matrix::pointer pointer;<br>            typedef iterator1 dual_iterator_type;<br>            typedef reverse_iterator1 dual_reverse_iterator_type;<br><br>            // Construction and destruction<br>            iterator2 ();<br>            iterator2 (matrix &amp;m, const iterator_type &amp;it);<br><br>            // Arithmetic<br>            iterator2 &amp;operator ++ ();<br>            iterator2 &amp;operator -- ();<br>            iterator2 &amp;operator += (difference_type n);<br>            iterator2 &amp;operator -= (difference_type n);<br>            difference_type operator - (const iterator2 &amp;it) const;<br><br>            // Dereference<br>            reference operator * () const;<br><br>            iterator1 begin () const;<br>            iterator1 end () const;<br>            reverse_iterator1 rbegin () const;<br>            reverse_iterator1 rend () const;<br><br>            // Indices<br>            size_type index1 () const;<br>            size_type index2 () const;<br><br>            // Assignment<br>            iterator2 &amp;operator = (const iterator2 &amp;it);<br><br>            // Comparison<br>            bool operator == (const iterator2 &amp;it) const;<br>            bool operator &lt;(const iterator2 &amp;it) const;<br>        };<br><br>        iterator2 begin2 ();<br>        iterator2 end2 ();<br><br>        // Reverse iterators<br><br>        const_reverse_iterator1 rbegin1 () const;<br>        const_reverse_iterator1 rend1 () const;<br><br>        reverse_iterator1 rbegin1 ();<br>        reverse_iterator1 rend1 ();<br><br>        const_reverse_iterator2 rbegin2 () const;<br>        const_reverse_iterator2 rend2 () const;<br><br>        reverse_iterator2 rbegin2 ();<br>        reverse_iterator2 rend2 ();<br>    };</code></pre>
  
<h2><a name="identity_matrix"></a>
 Identity Matrix</h2>
  
<h4>Description</h4>
  
<p>The templated class <code>identity_matrix&lt;T&gt; </code>represents identity
matrices. For a <em>(m x n</em>)-dimensional identity matrix and <em>0 &lt;=
i &lt; m</em>,<em> 0 &lt;= j &lt; n</em> holds <em>id</em><sub><em>i, j</em></sub><em>
 = 0</em>, if <em>i &lt;&gt; j</em>, and <em>id</em><sub><em>i, i</em></sub><em>
= 1</em>.</p>
  
<h4>Example</h4>
  
<pre>#include &lt;boost/numeric/ublas/matrix.hpp&gt;<br>#include &lt;boost/numeric/ublas/io.hpp&gt;<br><br>int main () {<br>    using namespace boost::numeric::ublas;<br>    identity_matrix&lt;double&gt; m (3);<br>    std::cout &lt;&lt; m &lt;&lt; std::endl;<br>}<br></pre>
<h4>Definition</h4>
  
<p>Defined in the header matrix.hpp.</p>
  
<h4>Template parameters</h4>
  
<table border="1">
     <tbody>
    <tr>
         <th>Parameter </th>
         <th>Description </th>
         <th>Default </th>
     </tr>
     <tr>
         <td><code>T</code> </td>
         <td>The type of object stored in the matrix. </td>
         <td>&nbsp;</td>
     </tr>
 
  </tbody>
</table>
  
<h4>Model of</h4>
  
<p><a href="expression.htm#matrix_expression">Matrix Expression</a>
. </p>
  
<h4>Type requirements</h4>
  
<p>None, except for those imposed by the requirements of <a href="expression.htm#matrix_expression">
Matrix Expression</a>
.</p>
  
<h4>Public base classes</h4>
  
<p><code>matrix_expression&lt;identity_matrix&lt;T&gt; &gt;</code> </p>
  
<h4>Members</h4>
  
<table border="1">
     <tbody>
    <tr>
         <th>Member </th>
         <th>Description </th>
     </tr>
     <tr>
         <td><code>identity_matrix ()</code> </td>
         <td>Constructs an <code>identity_matrix </code>that holds      
  zero rows of zero elements.</td>
     </tr>
     <tr>
         <td><code>identity_matrix (size_type size)</code></td>
         <td>Constructs an <code>identity_matrix </code>that holds      
  <code>size</code> rows of <code>size</code> elements.</td>
     </tr>
     <tr>
         <td><code>identity_matrix (const identity_matrix &amp;m)</code></td>
         <td>The copy constructor.</td>
     </tr>
     <tr>
         <td><code>void resize (size_type size)</code></td>
         <td>Resizes a <code>identity_matrix </code>to hold <code>size</code>
         rows of <code>size</code> elements. </td>
     </tr>
     <tr>
         <td><code>size_type size1 () const</code></td>
         <td>Returns the number of rows. </td>
     </tr>
     <tr>
         <td><code>size_type size2 () const</code></td>
         <td>Returns the number of columns. </td>
     </tr>
     <tr>
         <td><code>const_reference operator () (size_type i,         size_type
j) const</code></td>
         <td>Returns the value of the <code>j</code>-th element in      
  the <code>i</code>-th row. </td>
     </tr>
     <tr>
         <td><code>identity_matrix &amp;operator = (const         identity_matrix
&amp;m)</code></td>
         <td>The assignment operator.</td>
     </tr>
     <tr>
         <td><code>identity_matrix &amp;assign_temporary         (identity_matrix
&amp;m)</code></td>
         <td>Assigns a temporary. May change the identity matrix <code>m</code>
.</td>
     </tr>
     <tr>
         <td><code>void swap (identity_matrix &amp;m)</code></td>
         <td>Swaps the contents of the identity matrices. </td>
     </tr>
     <tr>
         <td><code>const_iterator1 begin1 () const</code></td>
         <td>Returns a <code>const_iterator1</code> pointing to         the
beginning of the <code>identity_matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator1 end1 () const</code></td>
         <td>Returns a <code>const_iterator1</code> pointing to         the
end of the <code>identity_matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator2 begin2 () const</code></td>
         <td>Returns a <code>const_iterator2</code> pointing to         the
beginning of the <code>identity_matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator2 end2 () const</code></td>
         <td>Returns a <code>const_iterator2</code> pointing to         the
end of the <code>identity_matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator1 rbegin1 () const</code></td>
         <td>Returns a <code>const_reverse_iterator1</code>         pointing
to the beginning of the reversed <code>identity_matrix</code>.         </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator1 rend1 () const</code></td>
         <td>Returns a <code>const_reverse_iterator1</code>         pointing
to the end of the reversed <code>identity_matrix</code>.         </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator2 rbegin2 () const</code></td>
         <td>Returns a <code>const_reverse_iterator2</code>         pointing
to the beginning of the reversed <code>identity_matrix</code>.         </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator2 rend2 () const</code></td>
         <td>Returns a <code>const_reverse_iterator2</code>         pointing
to the end of the reversed <code>identity_matrix</code>.         </td>
     </tr>
 
  </tbody>
</table>
  
<h4>Interface</h4>
  
<pre><code>    // Identity matrix class<br>    template&lt;class T&gt;<br>    class identity_matrix:<br>        public matrix_expression&lt;identity_matrix&lt;T&gt; &gt; {<br>    public:<br>        typedef std::size_t size_type;<br>        typedef std::ptrdiff_t difference_type;<br>        typedef T value_type;<br>        typedef const T &amp;const_reference;<br>        typedef T &amp;reference;<br>        typedef const T *const_pointer;<br>        typedef T *pointer;<br>        typedef const identity_matrix&lt;T&gt; const_self_type;<br>        typedef identity_matrix&lt;T&gt; self_type;<br>        typedef const matrix_const_reference&lt;const_self_type&gt; const_closure_type;<br>        typedef size_type const_iterator_type;<br>        typedef packed_tag storage_category;<br>        typedef unknown_orientation_tag orientation_category;<br><br>        // Construction and destruction<br>        identity_matrix ();<br>        identity_matrix (size_type size);<br>        identity_matrix (size_type size1, size_type size2);<br>        identity_matrix (const identity_matrix &amp;m);<br><br>        // Accessors<br>        size_type size1 () const;<br>        size_type size2 () const;<br><br>        // Resizing<br>        void resize (size_type size);<br>        void resize (size_type size1, size_type size2);<br><br>        // Element access<br>        const_reference operator () (size_type i, size_type j) const;<br><br>        // Assignment<br>        identity_matrix &amp;operator = (const identity_matrix &amp;m);<br>        identity_matrix &amp;assign_temporary (identity_matrix &amp;m);<br><br>        // Swapping<br>        void swap (identity_matrix &amp;m);<br>        friend void swap (identity_matrix &amp;m1, identity_matrix &amp;m2);<br><br>        class const_iterator1;<br>        class const_iterator2;<br>        typedef reverse_iterator_base1&lt;const_iterator1&gt; const_reverse_iterator1;<br>        typedef reverse_iterator_base2&lt;const_iterator2&gt; const_reverse_iterator2;<br><br>        // Element lookup<br>        const_iterator1 find_first1 (int rank, size_type i, size_type j) const;<br>        const_iterator1 find_last1 (int rank, size_type i, size_type j) const;<br>        const_iterator2 find_first2 (int rank, size_type i, size_type j) const;<br>        const_iterator2 find_last2 (int rank, size_type i, size_type j) const;<br><br>        // Iterators simply are indices.<br><br>        class const_iterator1:<br>            public container_const_reference&lt;identity_matrix&gt;,<br>            public random_access_iterator_base&lt;const_iterator1, value_type&gt; {<br>        public:<br>            typedef packed_random_access_iterator_tag iterator_category;<br>            typedef typename identity_matrix::difference_type difference_type;<br>            typedef typename identity_matrix::value_type value_type;<br>            typedef typename identity_matrix::const_reference reference;<br>            typedef typename identity_matrix::const_pointer pointer;<br>            typedef const_iterator2 dual_iterator_type;<br>            typedef const_reverse_iterator2 dual_reverse_iterator_type;<br><br>            // Construction and destruction<br>            const_iterator1 ();<br>            const_iterator1 (const identity_matrix &amp;m, const const_iterator_type &amp;it1, const const_iterator_type &amp;it2);<br><br>            // Arithmetic<br>            const_iterator1 &amp;operator ++ ();<br>            const_iterator1 &amp;operator -- ();<br>            const_iterator1 &amp;operator += (difference_type n);<br>            const_iterator1 &amp;operator -= (difference_type n);<br>            difference_type operator - (const const_iterator1 &amp;it) const;<br><br>            // Dereference<br>            reference operator * () const;<br><br>            const_iterator2 begin () const;<br>            const_iterator2 end () const;<br>            const_reverse_iterator2 rbegin () const;<br>            const_reverse_iterator2 rend () const;<br><br>            // Indices<br>            size_type index1 () const;<br>            size_type index2 () const;<br><br>            // Assignment<br>            const_iterator1 &amp;operator = (const const_iterator1 &amp;it);<br><br>            // Comparison<br>            bool operator == (const const_iterator1 &amp;it) const;<br>            bool operator &lt;(const const_iterator1 &amp;it) const;<br>        };<br><br>        typedef const_iterator1 iterator1;<br><br>        const_iterator1 begin1 () const;<br>        const_iterator1 end1 () const;<br><br>        class const_iterator2:<br>            public container_const_reference&lt;identity_matrix&gt;,<br>            public random_access_iterator_base&lt;const_iterator2, value_type&gt; {<br>        public:<br>            typedef packed_random_access_iterator_tag iterator_category;<br>            typedef typename identity_matrix::difference_type difference_type;<br>            typedef typename identity_matrix::value_type value_type;<br>            typedef typename identity_matrix::const_reference reference;<br>            typedef typename identity_matrix::const_pointer pointer;<br>            typedef const_iterator1 dual_iterator_type;<br>            typedef const_reverse_iterator1 dual_reverse_iterator_type;<br><br>            // Construction and destruction<br>            const_iterator2 ();<br>            const_iterator2 (const identity_matrix &amp;m, const const_iterator_type &amp;it1, const const_iterator_type &amp;it2);<br><br>            // Arithmetic<br>            const_iterator2 &amp;operator ++ ();<br>            const_iterator2 &amp;operator -- ();<br>            const_iterator2 &amp;operator += (difference_type n);<br>            const_iterator2 &amp;operator -= (difference_type n);<br>            difference_type operator - (const const_iterator2 &amp;it) const;<br><br>            // Dereference<br>            reference operator * () const;<br><br>            const_iterator1 begin () const;<br>            const_iterator1 end () const;<br>            const_reverse_iterator1 rbegin () const;<br>            const_reverse_iterator1 rend () const;<br><br>            // Indices<br>            size_type index1 () const;<br>            size_type index2 () const;<br><br>            // Assignment<br>            const_iterator2 &amp;operator = (const const_iterator2 &amp;it);<br><br>            // Comparison<br>            bool operator == (const const_iterator2 &amp;it) const;<br>            bool operator &lt;(const const_iterator2 &amp;it) const;<br>        };<br><br>        typedef const_iterator2 iterator2;<br><br>        const_iterator2 begin2 () const;<br>        const_iterator2 end2 () const;<br><br>        // Reverse iterators<br><br>        const_reverse_iterator1 rbegin1 () const;<br>        const_reverse_iterator1 rend1 () const;<br><br>        const_reverse_iterator2 rbegin2 () const;<br>        const_reverse_iterator2 rend2 () const;<br>    };</code></pre>
  
<h2><a name="zero_matrix"></a>
 Zero Matrix</h2>
  
<h4>Description</h4>
  
<p>The templated class <code>zero_matrix&lt;T&gt; </code>represents zero
matrices. For a <em>(m x n</em>)-dimensional zero matrix and <em>0 &lt;=
i &lt; m</em>,<em> 0 &lt;= j &lt; n</em> holds <em>z</em><sub><em>i, j</em></sub><em>
 = 0</em>.</p>
  
<h4>Example</h4>
  
<pre>#include &lt;boost/numeric/ublas/matrix.hpp&gt;<br>#include &lt;boost/numeric/ublas/io.hpp&gt;<br><br>int main () {<br>    using namespace boost::numeric::ublas;<br>    zero_matrix&lt;double&gt; m (3, 3);<br>    std::cout &lt;&lt; m &lt;&lt; std::endl;<br>}<br></pre>
<h4>Definition</h4>
  
<p>Defined in the header matrix.hpp.</p>
  
<h4>Template parameters</h4>
  
<table border="1">
     <tbody>
    <tr>
         <th>Parameter </th>
         <th>Description </th>
         <th>Default </th>
     </tr>
     <tr>
         <td><code>T</code> </td>
         <td>The type of object stored in the matrix. </td>
         <td>&nbsp;</td>
     </tr>
 
  </tbody>
</table>
  
<h4>Model of</h4>
  
<p><a href="expression.htm#matrix_expression">Matrix Expression</a>
. </p>
  
<h4>Type requirements</h4>
  
<p>None, except for those imposed by the requirements of <a href="expression.htm#matrix_expression">
Matrix Expression</a>
.</p>
  
<h4>Public base classes</h4>
  
<p><code>matrix_expression&lt;zero_matrix&lt;T&gt; &gt;</code> </p>
  
<h4>Members</h4>
  
<table border="1">
     <tbody>
    <tr>
         <th>Member </th>
         <th>Description </th>
     </tr>
     <tr>
         <td><code>zero_matrix ()</code> </td>
         <td>Constructs a <code>zero_matrix </code>that holds zero      
  rows of zero elements.</td>
     </tr>
     <tr>
         <td><code>zero_matrix (size_type size1, size_type size2)</code></td>
         <td>Constructs a <code>zero_matrix </code>that holds <code>size1</code>
         rows of <code>size2</code> elements.</td>
     </tr>
     <tr>
         <td><code>zero_matrix (const zero_matrix &amp;m)</code></td>
         <td>The copy constructor.</td>
     </tr>
     <tr>
         <td><code>void resize (size_type size1, size_type size2)</code></td>
         <td>Resizes a <code>zero_matrix </code>to hold <code>size1</code>
         rows of <code>size2</code> elements. </td>
     </tr>
     <tr>
         <td><code>size_type size1 () const</code></td>
         <td>Returns the number of rows. </td>
     </tr>
     <tr>
         <td><code>size_type size2 () const</code></td>
         <td>Returns the number of columns. </td>
     </tr>
     <tr>
         <td><code>const_reference operator () (size_type i,         size_type
j) const</code></td>
         <td>Returns the value of the <code>j</code>-th element in      
  the <code>i</code>-th row. </td>
     </tr>
     <tr>
         <td><code>zero_matrix &amp;operator = (const zero_matrix       
 &amp;m)</code></td>
         <td>The assignment operator.</td>
     </tr>
     <tr>
         <td><code>zero_matrix &amp;assign_temporary (zero_matrix       
 &amp;m)</code></td>
         <td>Assigns a temporary. May change the zero matrix <code>m</code>
.</td>
     </tr>
     <tr>
         <td><code>void swap (zero_matrix &amp;m)</code></td>
         <td>Swaps the contents of the zero matrices. </td>
     </tr>
     <tr>
         <td><code>const_iterator1 begin1 () const</code></td>
         <td>Returns a <code>const_iterator1</code> pointing to         the
beginning of the <code>zero_matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator1 end1 () const</code></td>
         <td>Returns a <code>const_iterator1</code> pointing to         the
end of the <code>zero_matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator2 begin2 () const</code></td>
         <td>Returns a <code>const_iterator2</code> pointing to         the
beginning of the <code>zero_matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_iterator2 end2 () const</code></td>
         <td>Returns a <code>const_iterator2</code> pointing to         the
end of the <code>zero_matrix</code>. </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator1 rbegin1 () const</code></td>
         <td>Returns a <code>const_reverse_iterator1</code>         pointing
to the beginning of the reversed <code>zero_matrix</code>.         </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator1 rend1 () const</code></td>
         <td>Returns a <code>const_reverse_iterator1</code>         pointing
to the end of the reversed <code>zero_matrix</code>.         </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator2 rbegin2 () const</code></td>
         <td>Returns a <code>const_reverse_iterator2</code>         pointing
to the beginning of the reversed <code>zero_matrix</code>.         </td>
     </tr>
     <tr>
         <td><code>const_reverse_iterator2 rend2 () const</code></td>
         <td>Returns a <code>const_reverse_iterator2</code>         pointing
to the end of the reversed <code>zero_matrix</code>.         </td>
     </tr>
 
  </tbody>
</table>
  
<h4>Interface</h4>
  
<pre><code>    // Zero matrix class<br>    template&lt;class T&gt;<br>    class zero_matrix:<br>        public matrix_expression&lt;zero_matrix&lt;T&gt; &gt; {<br>    public:<br>        typedef std::size_t size_type;<br>        typedef std::ptrdiff_t difference_type;<br>        typedef T value_type;<br>        typedef const T &amp;const_reference;<br>        typedef T &amp;reference;<br>        typedef const T *const_pointer;<br>        typedef T *pointer;<br>        typedef const zero_matrix&lt;T&gt; const_self_type;<br>        typedef zero_matrix&lt;T&gt; self_type;<br>        typedef const matrix_const_reference&lt;const_self_type&gt; const_closure_type;<br>        typedef size_type const_iterator_type;<br>        typedef sparse_tag storage_category;<br>        typedef unknown_orientation_tag orientation_category;<br><br>        // Construction and destruction<br>        zero_matrix ();<br>        zero_matrix (size_type size1, size_type size2);<br>        zero_matrix (const zero_matrix &amp;m);<br><br>        // Accessors<br>        size_type size1 () const;<br>        size_type size2 () const;<br><br>        // Resizing<br>        void resize (size_type size1, size_type size2);<br><br>        // Element access<br>        const_reference operator () (size_type i, size_type j) const;<br><br>        // Assignment<br>        zero_matrix &amp;operator = (const zero_matrix &amp;m);<br>        zero_matrix &amp;assign_temporary (zero_matrix &amp;m);<br><br>        // Swapping<br>        void swap (zero_matrix &amp;m);<br>        friend void swap (zero_matrix &amp;m1, zero_matrix &amp;m2);<br><br>        class const_iterator1;<br>        class const_iterator2;<br>        typedef reverse_iterator_base1&lt;const_iterator1&gt; const_reverse_iterator1;<br>        typedef reverse_iterator_base2&lt;const_iterator2&gt; const_reverse_iterator2;<br><br>        // Element lookup<br>        const_iterator1 find_first1 (int rank, size_type i, size_type j) const;<br>        const_iterator1 find_last1 (int rank, size_type i, size_type j) const;<br>        const_iterator2 find_first2 (int rank, size_type i, size_type j) const;<br>        const_iterator2 find_last2 (int rank, size_type i, size_type j) const;<br><br>        // Iterators simply are indices.<br><br>        class const_iterator1:<br>            public container_const_reference&lt;zero_matrix&gt;,<br>            public bidirectional_iterator_base&lt;const_iterator1, value_type&gt; {<br>        public:<br>            typedef sparse_bidirectional_iterator_tag iterator_category;<br>            typedef typename zero_matrix::difference_type difference_type;<br>            typedef typename zero_matrix::value_type value_type;<br>            typedef typename zero_matrix::const_reference reference;<br>            typedef typename zero_matrix::const_pointer pointer;<br>            typedef const_iterator2 dual_iterator_type;<br>            typedef const_reverse_iterator2 dual_reverse_iterator_type;<br><br>            // Construction and destruction<br>            const_iterator1 ();<br>            const_iterator1 (const zero_matrix &amp;m, const const_iterator_type &amp;it1, const const_iterator_type &amp;it2);<br><br>            // Arithmetic<br>            const_iterator1 &amp;operator ++ ();<br>            const_iterator1 &amp;operator -- ();<br><br>            // Dereference<br>            reference operator * () const;<br><br>            const_iterator2 begin () const;<br>            const_iterator2 end () const;<br>            const_reverse_iterator2 rbegin () const;<br>            const_reverse_iterator2 rend () const;<br><br>            // Indices<br>            size_type index1 () const;<br>            size_type index2 () const;<br><br>            // Assignment<br>            const_iterator1 &amp;operator = (const const_iterator1 &amp;it);<br><br>            // Comparison<br>            bool operator == (const const_iterator1 &amp;it) const;<br>        };<br><br>        typedef const_iterator1 iterator1;<br><br>        const_iterator1 begin1 () const;<br>        const_iterator1 end1 () const;<br><br>        class const_iterator2:<br>            public container_const_reference&lt;zero_matrix&gt;,<br>            public bidirectional_iterator_base&lt;const_iterator2, value_type&gt; {<br>        public:<br>            typedef sparse_bidirectional_iterator_tag iterator_category;<br>            typedef typename zero_matrix::difference_type difference_type;<br>            typedef typename zero_matrix::value_type value_type;<br>            typedef typename zero_matrix::const_reference reference;<br>            typedef typename zero_matrix::const_pointer pointer;<br>            typedef const_iterator1 dual_iterator_type;<br>            typedef const_reverse_iterator1 dual_reverse_iterator_type;<br><br>            // Construction and destruction<br>            const_iterator2 ();<br>            const_iterator2 (const zero_matrix &amp;m, const const_iterator_type &amp;it1, const const_iterator_type &amp;it2);<br><br>            // Arithmetic<br>            const_iterator2 &amp;operator ++ ();<br>            const_iterator2 &amp;operator -- ();<br><br>            // Dereference<br>            reference operator * () const;<br><br>            const_iterator1 begin () const;<br>            const_iterator1 end () const;<br>            const_reverse_iterator1 rbegin () const;<br>            const_reverse_iterator1 rend () const;<br><br>            // Indices<br>            size_type index1 () const;<br>            size_type index2 () const;<br><br>            // Assignment<br>            const_iterator2 &amp;operator = (const const_iterator2 &amp;it);<br><br>            // Comparison<br>            bool operator == (const const_iterator2 &amp;it) const;<br>        };<br><br>        typedef const_iterator2 iterator2;<br><br>        const_iterator2 begin2 () const;<br>        const_iterator2 end2 () const;<br><br>        // Reverse iterators<br><br>        const_reverse_iterator1 rbegin1 () const;<br>        const_reverse_iterator1 rend1 () const;<br><br>        const_reverse_iterator2 rbegin2 () const;<br>        const_reverse_iterator2 rend2 () const;<br>    };</code></pre>
  
<hr>  
<p>Copyright (&copy;) 2000-2002 Joerg Walter, Mathias Koch <br>
 Permission to copy, use, modify, sell and distribute this document is granted
provided this copyright notice appears in all copies. This document is provided
``as is'' without express or implied warranty, and with no claim as to its
suitability for any purpose.</p>
  
<p>Last revised: 1/15/2003</p>
 
</body>
</html>
