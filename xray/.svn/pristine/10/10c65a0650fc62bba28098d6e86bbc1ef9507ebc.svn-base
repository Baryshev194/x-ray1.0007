<html>
<head>
<title>Organization</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="stylesheet" href="theme/style.css" type="text/css">
</head>

<body>
<table width="100%" border="0" background="theme/bkd2.gif" cellspacing="2">
  <tr> 
    <td width="10"> 
    </td>
    <td width="85%"> <font size="6" face="Verdana, Arial, Helvetica, sans-serif"><b>Organization</b></font> 
    </td>
    <td width="112"><a href="http://spirit.sf.net"><img src="theme/spirit.gif" width="112" height="48" align="right" border="0"></a></td>
  </tr>
</table>
<br>
<table border="0">
  <tr>
    <td width="10"></td>
    <td width="30"><a href="../index.html"><img src="theme/u_arr.gif" border="0"></a></td>
    <td width="30"><a href="basic_concepts.html"><img src="theme/l_arr.gif" border="0"></a></td>
    <td width="20"><a href="primitives.html"><img src="theme/r_arr.gif" border="0"></a></td>
   </tr>
</table>
<p>The framework is highly modular and is organized in layers</p>
<table width="100%" border="0" class="table_title">
  <tr>
    <td><table width="100%" border="0">
        <tr class="table_cells"> 
          <td><div align="center"><font color="#000099"><strong>attribute<br>
              </strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>debug</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>dynamic</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>error_handling</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>iterator</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>symbols</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>tree</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>utility</strong></font></div></td>
        </tr>
        <tr class="table_cells"> 
          <td><font color="#000099" size="-2">closure.hpp<br>
            closure_context.hpp<br>
            grouping.hpp<br>
            parametric.hpp </font></td>
          <td><font color="#000099" size="-2">debug_node.hpp<br>
            minimal.hpp<br>
            parser_names.hpp </font></td>
          <td><font color="#000099" size="-2">for.hpp<br>
            if.hpp<br>
            while.hpp </font></td>
          <td><font color="#000099" size="-2">exceptions.hpp</font></td>
          <td><font color="#000099" size="-2">file_iterator.hpp<br>
            fixed_size_queue.hpp<br>
            multi_pass.hpp<br>
            position_iterator.hpp<span class="keyword"> </span></font></td>
          <td><font color="#000099" size="-2">symbols.hpp</font></td>
          <td><font color="#000099" size="-2">ast.hpp<br>
            common.hpp<br>
            parse_tree.hpp<br>
            parse_tree_utils.hpp<br>
            parsetree.dtd<br>
            tree_iterator.hpp<br>
            tree_to_xml.hpp<span class="keyword"><br>
            </span></font></td>
          <td><font color="#000099" size="-2">chset.hpp<br>
            chset_operators.hpp<br>
            confix.hpp<br>
            escape_char.hpp<br>
            flush_multi_pass.hpp<br>
            functor_parser.hpp<br>
            lists.hpp<br>
            loops.hpp<br>
            refactoring.hpp<br>
            regex.hpp<br>
            scoped_lock.hpp </font></td>
        </tr>
      </table></td>
  </tr>
  <tr>
    <td><table width="100%" border="0">
        <tr> 
          <td colspan="5"><div align="center"><strong><font color="#FFFFFF">Core<br>
              </font></strong></div></td>
        </tr>
        <tr class="table_cells"> 
          <td><div align="center"><font color="#000099"><strong>scanner<br>
              </strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>primitives</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>composite</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>non_terminal</strong></font></div></td>
          <td><div align="center"><font color="#000099"><strong>meta</strong></font></div></td>
        </tr>
        <tr class="table_cells"> 
          <td><font color="#000099" size="-2">scanner.hpp<br>
            skipper.hpp</font></td>
          <td><font color="#000099" size="-2">primitives.hpp<br>
            numerics.hpp</font></td>
          <td><font color="#000099" size="-2">composite.hpp<br>
            operators.hpp<br>
            actions.hpp<br>
            directives.hpp<br>
            epsilon.hpp</font></td>
          <td><font color="#000099" size="-2">parser_context.hpp<br>
            parser_id.hpp<br>
            rule.hpp<br>
            subrule.hpp<br>
            grammar.hpp</font></td>
          <td><font color="#000099" size="-2">fundamental.hpp<br>
            parser_traits.hpp<br>
            traverse.hpp </font></td>
        </tr>
      </table></td>
  </tr>
</table>
<p>Spirit is currently organized in basically two layers, the core and all the 
  modules above the core: Debug, Attribute, Symbols, Tree, Utility, Dynamic and 
  Error Handling. In the future, new layers may be built on top of existing layers. 
  The framework's architecture is completely orthogonal. The relationship between 
  the layers is totally acyclic. The core does not depend nor know the existence 
  of the other layers. Modules in a layer do not depend on other modules in the 
  same layer. </p>
<p>The client may use only the modules that she wants without incurring any compile 
  time nor run time penalty. A minimalistic approach is to use only the core as 
  is. The highly streamlined core is usable by itself. The core is highly suitable 
  for tasks such as micro parsing.</p>
<p><b>Attribute</b> module introduces advanced semantic action machinery with 
  emphasis on extraction and passing of data up and down the parser hierarchy 
  through inherited and synthesized attributes. Attributes may also be used to 
  actually control the parsing. Parametric parsers are a form of dynamic parsers 
  that change its behavior at run time based on some attribute or data.</p>
<p>The <b>Debug</b> module provides library wide parser debugging functionalities. 
  This module essentially hooks itself up transparently into the core unintrusively 
  and only when necessary.</p>
<p>The <strong>Dynamic</strong> module focuses on parsers with behavior that can 
  be modified at run-time.</p>
<p><b>Error Handling</b>. The framework would not be complete without Error Handling. 
  C++'s exception handling mechanism is a perfect match for Spirit due to its 
  highly recursive <em>functional</em> nature. C++ Exceptions are used extensively 
  by this module for handling errors.</p>
<p>The <b>Iterator</b> module is independent of Spirit and may be used in other 
  contexts as well. This module is a compilation of stand-alone iterators and 
  iterator wrappers compatible with Spirit. Over the course of time, these iterators 
  were found to be most useful for parsing with Spirit. </p>
<p><b>Symbols</b> module focuses on symbol table management. This module is rather 
  basic as of now. The goal is to build a sub-framework that will be able to accommodate 
  C++ style multiple scope mechanisms. C++ is a great model for the complexity 
  of scoping that perhaps has no parallel in any other language. There are classes 
  and inheritance, private, protected and public access restrictions, friends, 
  namespaces, using declarations, using directives, Koenig lookup and more. The 
  symbol table functionality we have now will be the basis of a complete facility 
  that will attempt to model this.</p>
<blockquote> 
  <p><em><font color="#003366">I wish that I could ever see, a structure as lovely 
    as a tree</font></em><font color="#003366">...</font></p>
</blockquote>
<p> Parse Tree and Abstract Syntax Tree (AST) generation are handled by the <b>Tree</b> 
  module. There are advantages with Parse Trees and Abstract Syntax Trees over 
  semantic actions. You can make multiple passes over the data without having 
  to re-parse the input. You can perform transformations on the tree. You can 
  evaluate things in any order you want, whereas with attribute schemes you have 
  to process in a begin to end fashion. You do not have to worry about backtracking 
  and action side effects that may occur with an ambiguous grammar.</p>
<p>The <b>Utility</b> module is a set of commonly useful parsers that were found 
  to be quite useful. This library of parsers significantly reduce the development 
  time. There are parsers that handle common tasks such as list processing, comments, 
  confix expressions, etc.</p>
<h2>Header files</h2>
<p>Spirit is designed to be header only. Generally, there are no libraries to build
and link against. Certain features, however, require additional libraries; in particular
the <a href="regular_expression_parser.html">regular expression parser</a> requires
<a href="http://www.boost.org/libs/regex/index.htm">Boost.Regex</a> and <a href="grammar.html#multithreading">multithreading support</a>
requires <a href="http://www.boost.org/libs/thread/doc/index.html">Boost.Threads.</a></p>
<p>Using Spirit is as easy as including the main header file: </p>
<pre>    <span class="preprocessor">#include</span> <span class="special">&lt;</span>boost<span class="special">/</span>spirit<span class="special">.</span>hpp<span class="special">&gt;</span></pre>
<p>Doing so will include all the header files. This might not be desirable. A 
  low cholesterol alternative is to include only the module that you need. Each 
  of the modules has its own header file. The master spirit header file actually 
  includes all the module files:</p>
<pre>    <span class="preprocessor">#include</span> <span class="special">&lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>attribute<span class="special">.</span>hpp<span class="special">&gt;
    <span class="preprocessor">#include</span> &lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>debug<span class="special">.</span>hpp<span class="special">&gt;</span><span class="special">
    <span class="preprocessor">#include</span> &lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>dynamic<span class="special">.</span>hpp<span class="special">&gt;</span><span class="special">
    <span class="preprocessor">#include</span> &lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>error_handling<span class="special">.</span>hpp<span class="special">&gt;</span><span class="special"></span><span class="special">
    <span class="preprocessor">#include</span> &lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>iterator<span class="special">.</span>hpp<span class="special">&gt;
    <span class="preprocessor">#include</span> &lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>symbols<span class="special">.</span>hpp<span class="special">&gt;</span><span class="special"></span><span class="special">
    <span class="preprocessor">#include</span> &lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>tree<span class="special">.</span>hpp<span class="special">&gt;</span><span class="special"></span><span class="special">
    <span class="preprocessor">#include</span> &lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>utility<span class="special">.</span>hpp<span class="special">&gt;</span><span class="special"></span><span class="special"></span></pre>
<p>To avoid unnecessary inclusion of features that you do not need, it is better 
  to include only the modules that you need. For even finer control of header 
  file inclusion, you can include only the specific files that you need. Each 
  module is in its own sub-directory. For example, if you need only the closures 
  in addition to the core:</p>
<pre>    <span class="preprocessor">#include</span> <span class="special">&lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>core<span class="special">.</span>hpp<span class="special">&gt;
    <span class="preprocessor">#include</span> &lt;</span>boost<span class="special">/</span>spirit<span class="special">/</span>attribute<span class="special">/</span>closure<span class="special">.</span>hpp<span class="special">&gt;</span></pre>
<table border="0">
  <tr> 
    <td width="10"></td>
    <td width="30"><a href="../index.html"><img src="theme/u_arr.gif" border="0"></a></td>
    <td width="30"><a href="basic_concepts.html"><img src="theme/l_arr.gif" border="0"></a></td>
    <td width="20"><a href="primitives.html"><img src="theme/r_arr.gif" border="0"></a></td>
  </tr>
</table>
<br>
<hr size="1">
<p class="copyright">Copyright &copy; 1998-2003 Joel de Guzman<br>
  <br>
  <font size="2">Permission to copy, use, modify, sell and distribute this document 
  is granted provided this copyright notice appears in all copies. This document 
  is provided &quot;as is&quot; without express or implied warranty, and with 
  no claim as to its suitability for any purpose.</font></p>
<p class="copyright">&nbsp;</p>
</body>
</html>
