#==============================================================================
#   Spirit v1.6.0
#   Copyright (c) 2002 Joel de Guzman
#   http://spirit.sourceforge.net/
#
#   Permission to copy, use, modify, sell and distribute this software
#   is granted provided this copyright notice appears in all copies.
#   This software is provided "as is" without express or implied
#   warranty, and with no claim as to its suitability for any purpose.
#==============================================================================
#
#  Spirit regression test boost-jam file
#  Joel de Guzman [Sept 27, 2002]
#

subproject libs/spirit/test ;

# Spirit.Core.Kernel
unit-test match_tests : match_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

# Spirit.Core.Scanner
unit-test scanner_tests : scanner_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

# Spirit.Core.Primitive
unit-test primitives_tests : primitives_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test numerics_tests : numerics_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :   <vc7><*><optimization>speed
        <vc7><*><inlining>on
        <metrowerks><*><optimization>speed
    :
    ;

# Spirit.Core.Meta
unit-test fundamental_tests : fundamental_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test parser_traits_tests : parser_traits_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test traverse_tests : traverse_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

# Spirit.Core.Composite
unit-test composite_tests : composite_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test epsilon_tests : epsilon_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test actions_tests : actions_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test operators_tests : operators_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test directives_tests : directives_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

# Spirit.Core.Non_Terminal
unit-test rule_tests : rule_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test grammar_tests : grammar_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :   <metrowerks><*><optimization>speed
    :
    ;

unit-test subrule_tests : subrule_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test owi_st_tests : owi_st_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test owi_mt_tests : owi_mt_tests.cpp
      <dll>../../thread/build/boost_thread
    : <sysinclude>$(BOOST_ROOT)
    : <threading>multi
	:
    ;

# Spirit.Attribute
unit-test closure_tests : closure_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :   <metrowerks><*><optimization>speed
    :
    ;

unit-test parametric_tests : parametric_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

# Spirit.Error_Handling
unit-test exception_tests : exception_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

# Spirit.Dynamic
unit-test if_tests : if_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
	:
    ;

unit-test for_tests : for_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test while_tests : while_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

# Spirit.Utility
unit-test chset_tests : chset_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test loops_tests : loops_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test symbols_tests : symbols_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test escape_char_parser_tests : escape_char_parser_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :   <vc7><*><optimization>speed
        <vc7><*><inlining>on
        <metrowerks><*><optimization>speed
    :
    ;

unit-test scoped_lock_tests : scoped_lock_tests.cpp
      <dll>../../thread/build/boost_thread
    : <sysinclude>$(BOOST_ROOT)
    : <threading>multi
    ;

# Spirit.Iterator
unit-test fixed_size_queue_tests : fixed_size_queue_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :
    ;

unit-test multi_pass_tests : multi_pass_tests.cpp
    : <sysinclude>$(BOOST_ROOT)
    :   <metrowerks><*><optimization>speed
    :
    ;

