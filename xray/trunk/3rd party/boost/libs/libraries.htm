<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<title>Boost Libraries</title>
</head>

<body bgcolor="#FFFFFF" text="#000000">

<table border="1" cellpadding="2" bgcolor="#007F7F">
    <tr>
        <td bgcolor="#FFFFFF">
        <img src="../c++boost.gif"
        alt="c++boost.gif (8819 bytes)" width="277" height="86"></td>
        <td><a href="../index.htm"><font color="#FFFFFF" size="4"
        face="Arial">Home</font></a></td>
        <td><a href="libraries.htm"><font color="#FFFFFF"
        size="4" face="Arial">Libraries</font></a></td>
        <td><a href="../people/people.htm"><font color="#FFFFFF"
        size="4" face="Arial">People</font></a></td>
        <td><a href="../more/faq.htm"><font color="#FFFFFF"
        size="4" face="Arial">FAQ</font></a></td>
        <td><a href="../more/index.htm"><font color="#FFFFFF"
        size="4" face="Arial">More</font></a></td>
    </tr>
</table>

<h1>Boost Libraries</h1>
<p>
<a href="#Alphabetically">Libraries Listed Alphabetically</a><br>
<a href="#Category">Libraries Listed by Category<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#String">String and text processing<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Containers">Containers<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Iterators">Iterators<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Algorithms">Algorithms<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Function-objects">Function Objects and
higher-order programming<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Generic">Generic Programming</a><br>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Generic">Template
Metaprogramming</a><br>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Preprocessor">Preprocessor Metaprogramming</a><a href="#Generic"><br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Concurrent">Concurrent Programming</a><br>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Math">Math and numerics<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Correctness">Correctness and testing<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Data">Data structures<br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#IO">Input/Output</a><a href="#Memory"><br>
</a>&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Inter-language">Inter-language support</a><br>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Memory">Memory</a><br>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Parsing">Parsing</a><br>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="#Miscellaneous">Miscellaneous</a><br>
&nbsp;&nbsp;&nbsp;&nbsp; <a href="#workarounds">Broken compiler workarounds</a><br>
<a href="#Obsolete">Obsolete Libraries</a><br>
<a href="#Beta">Beta Libraries</a></p>

<p>See <a href="../status/compiler_status.html">Compiler Status</a>
 page to find out what library works with which compiler.<br>
See <a href="hdr_depend.html">Header Dependencies</a>  page to find
out what other headers each boost header includes.<br>
See <a href="../more/download.html">Download and Installation</a>  page to find out
how to download and install the libraries.<br>
See <a href="../tools/build/index.html">Building Boost Libraries</a>  page to find
out how to build object libraries, when needed.</p>

<p>Documentation for some Boost libraries is available in alternative formats:</p>
<ul>
  <li>PDF [<a href="http://boost.sourceforge.net/release/boost_1_30_doc_pdf.zip">zip</a>] [<a href="http://boost.sourceforge.net/release/boost_1_30_doc_pdf.tar.gz">tar.gz</a>] [<a href="http://boost.sourceforge.net/release/boost_1_30_doc_pdf.tar.bz2">tar.bz2</a>]</li>
  <li>Unix man pages [<a href="http://boost.sourceforge.net/release/boost_1_30_doc_man.tar.gz">tar.gz</a>] [<a href="http://boost.sourceforge.net/release/boost_1_30_doc_man.tar.bz2">tar.bz2</a>]</li>
</ul>

<hr>

<h2>Libraries Listed <a name="Alphabetically">Alphabetically</a></h2>

<ul>
    <li><a href="any/index.html">any</a> - Safe, generic container for single
      values of different value types, from Kevlin Henney.&nbsp;</li>
    <li><a href="array/index.htm">array</a> - STL compliant
        container wrapper for arrays of constant size, from
        Nicolai Josuttis.</li>
    <li><a href="bind/bind.html">bind</a> and <a href="bind/mem_fn.html"> mem_fn</a> - Generalized binders for function/object/pointers and member functions, from Peter
      Dimov.</li>
    <li><a href="utility/call_traits.htm">call_traits</a> -
        Defines types for passing parameters, from John Maddock,
        Howard Hinnant, et al.</li>
    <li><a href="compatibility/index.html">compatibility</a> - Help for
      non-conforming standard libraries, from Ralf Grosse-Kunstleve and Jens
      Maurer.</li>
    <li><a href="compose/index.htm">compose</a> - Functional
        composition adapters for the STL, from Nicolai Josuttis.</li>
    <li><a href="utility/compressed_pair.htm">compressed_pair</a>
        - Empty member optimization, from John Maddock, Howard
        Hinnant, et al.</li>
    <li><a href="concept_check/concept_check.htm">concept check</a>
        - Tools for generic programming, from Jeremy Siek.</li>
    <li><a href="config/config.htm">config</a> - Helps boost
        library developers adapt to compiler idiosyncrasies; not
        intended for library users.</li>
    <li><a href="conversion/index.htm">conversion</a> - Numeric,
        polymorphic, and lexical casts, from Dave Abrahams and
        Kevlin Henney.</li>
    <li><a href="crc/index.html">crc</a> - Cyclic Redundancy Code, from Daryle
      Walker.</li>
    <li><a href="date_time/doc/index.html">date_time</a> - Date-Time library from Jeff Garland.</li>
    <li><a href="dynamic_bitset/dynamic_bitset.html">dynamic_bitset</a> - A runtime sized version of <tt>std::bitset</tt> from Jeremy Siek and Chuck Allison.</li>
    <li><a href="filesystem/doc/index.htm">filesystem</a> - Portable paths, 
    iteration over directories, and other useful filesystem operations, from 
    Beman Dawes.</li>
    <li><a href="format/index.htm">format</a> - Type-safe 'printf-like' format 
    operations, from Samuel Krempp.</li>
    <li><a href="function/index.html">function</a> - Function object wrappers
      for deferred calls or callbacks, from Doug Gregor.</li>
    <li><a href="functional/index.html">functional</a> - Enhanced
        function object adaptors, from Mark Rodgers.</li>
    <li><a href="graph/doc/table_of_contents.html">graph</a> -
        Generic graph components and algorithms, from Jeremy Siek
        and a University of Notre Dame team.</li>
    <li><a href="integer/index.htm">integer</a> - Headers to ease
        dealing with integral types.</li>
    <li><a href="numeric/interval/doc/interval.htm">interval </a>- Extends the 
    usual arithmetic functions to mathematical intervals, from Guillaume 
    Melquiond, Hervé Brönnimann and Sylvain Pion.</li>
    <li><a href="io/doc/ios_state.html">io state savers</a> - Save I/O state to 
    prevent jumbled data, from Daryle Walker.</li>
    <li><a href="utility/iterator_adaptors.htm">iterator adaptors</a>
        - Adapt a base type into a standard conforming iterator,
        and more, from Dave Abrahams, Jeremy Siek, and John
        Potter.</li>
    <li><a href="lambda/doc/index.html">lambda</a> - Define small unnamed 
    function objects at the actual call site, and more, from Jaakko Järvi and 
    Gary Powell.</li>
    <li><a href="math/doc/index.html">math</a> - Several contributions in the 
    domain of mathematics, from various authors.</li>
    <li><a href="math/doc/common_factor.html">math/common_factor</a> - Greatest 
    common divisor and least common multiple, from Daryle Walker.</li>
    <li><a href="math/octonion/index.html">math/octonion</a> -
        Octonions, from Hubert Holin.</li>
    <li><a href="math/quaternion/index.html">math/quaterion</a> -
        Quaterions, from Hubert Holin.</li>
    <li><a href="math/special_functions/index.html">math/special_functions</a> -
        Mathematical special functions such as atanh, sinc, and sinhc,
        from Hubert Holin.</li>
    <li><a href="mpl/doc/index.html">mpl</a> - Template metaprogramming 
    framework of compile-time algorithms, sequences and metafunction classes, 
    from Aleksey Gurtovoy.</li>
    <li><a href="multi_array/doc/index.html">multi_array</a> - Multidimensional 
    containers and adaptors for arrays of contiguous data, from Ron Garcia.</li>
    <li><a href="utility/operators.htm">operators</a> - Templates
        ease arithmetic classes and iterators, from Dave Abrahams
        and Jeremy Siek.</li>
    <li><a href="optional/doc/optional.html">optional</a> - Discriminated-union 
    wrapper for optional values, from Fernando Cacciola.</li>
    <li><a href="pool/doc/index.html">pool</a> - Memory pool management, from
      Steve Cleary.</li>
    <li><a href="preprocessor/doc/index.html">preprocessor</a> - Preprocessor 
    metaprogramming tools including repetition and recursion, from Vesa Karvonen 
    and Paul Mensonides.</li>
    <li><a href="property_map/property_map.html">property map</a>
        - Concepts defining interfaces which map key objects to
        value objects, from Jeremy Siek.</li>
    <li><a href="python/doc/index.html">python</a> - Reflects C++
        classes and functions into <a
        href="http://www.python.org">Python</a>, from Dave
        Abrahams.</li>
    <li><a href="random/index.html">random</a> - A complete
        system for random number generation, from Jens Maurer.</li>
    <li><a href="rational/index.html">rational</a> - A rational
        number class, from Paul Moore.</li>

    <li><a href="bind/ref.html">ref</a> - A utility library for
    passing references to generic functions, from Jaako J&auml;rvi,
    Peter Dimov, Doug Gregor, and Dave Abrahams.</li>

    <li><a href="regex/index.htm">regex</a> - Regular expression
        library, from John Maddock.</li>
    <li><a href="signals/index.html">signals</a> - managed signals &amp;
         slots callback implementation, from Doug Gregor.</li>
    <li><a href="smart_ptr/index.htm">smart_ptr</a> - Five smart
        pointer class templates, from Greg Colvin, Beman Dawes,
        Peter Dimov, and Darin Adler.</li>
    <li><a href="static_assert/static_assert.htm">static_assert</a>
        - Static assertions (compile time assertions), from John
        Maddock.</li>
    <li><a href="spirit/index.html">spirit</a> - LL parser framework&nbsp; 
    represents parsers directly as EBNF grammars in inlined C++, from Joel de 
    Guzman and team.</li>
    <li><a href="test/doc/index.htm">test</a> - Support for simple program testing, 
    full unit testing, and for program
      execution monitoring, from Gennadiy Rozental.</li>
    <li><a href="thread/doc/index.html">thread</a> - Portable C++
      multi-threading, from William Kempf.</li>
    <li><a href="timer/index.htm">timer</a> - Event timer,
        progress timer, and progress display classes, from Beman
        Dawes.</li>
    <li><a href="tokenizer/index.htm">tokenizer</a> - Break of a string or other
      character sequence into a series of tokens, from John Bandela.</li>
    <li><a href="tuple/doc/tuple_users_guide.html">tuple</a> - Ease definition of functions returning multiple values, and more,
    from Jaakko Järvi.</li>
    <li><a href="type_traits/index.htm">type_traits</a> -
        Templates for fundamental properties of types, from John
        Maddock, Steve Cleary, et al.</li>
    <li><a href="numeric/ublas/doc/index.htm">uBLAS</a> - Basic linear algebra 
    for dense, packed and sparse matrices, from Joerg Walter and Mathias Koch.</li>
    <li><a href="utility/utility.htm">utility</a> - Class <b>noncopyable</b>
        plus <b>checked_delete()</b>, <b>checked_array_delete()</b>, <b>next(),</b>&nbsp;
      <b>prior()</b>
        function templates, plus <b>base-from-member idiom</b>, from Dave Abrahams and others. </li>
</ul>

<hr>

<h2>Libraries Listed by <a name="Category">Category</a></h2>

<h3><a name="String">String</a> and text processing</h3>

<ul>
    <li><a href="conversion/lexical_cast.htm">conversion/lexical_cast</a> - <tt>lexical_cast</tt>
      class template, from Kevlin Henney.</li>
    <li><a href="format/index.htm">format</a> - Type-safe 'printf-like' format 
    operations, from Samuel Krempp.</li>
    <li><a href="regex/index.htm">regex</a> - Regular expression
        library, from John Maddock</li>
    <li><a href="spirit/index.html">spirit</a> - LL parser framework&nbsp; 
    represents parsers directly as EBNF grammars in inlined C++, from Joel de 
    Guzman and team.</li>
    <li><a href="tokenizer/index.htm">tokenizer</a> - Break of a string or other
      character sequence into a series of tokens, from John Bandela.</li>
</ul>

<h3><a name="Containers">Containers</a></h3>

<ul>
    <li><a href="array/index.htm">array</a> - STL compliant
        container wrapper for arrays of constant size, from
        Nicolai Josuttis.</li>
    <li><a href="dynamic_bitset/dynamic_bitset.html">dynamic_bitset</a> - A runtime sized version of <tt>std::bitset</tt> from Jeremy Siek and Chuck Allison.</li>
    <li><a href="graph/doc/table_of_contents.html">graph</a> -
        Generic graph components and algorithms, from Jeremy Siek
        and a University of Notre Dame team.</li>
    <li><a href="multi_array/doc/index.html">multi_array</a> - Multidimensional 
    containers and adaptors for arrays of contiguous data, from Ron Garcia.</li>
    <li><a href="property_map/property_map.html">property map</a>
        - Concepts defining interfaces which map key objects to
        value objects, from Jeremy Siek.</li>
</ul>

<h3><a name="Iterators">Iterators</a></h3>

<ul>
    <li><a href="graph/doc/table_of_contents.html">graph</a> -
        Generic graph components and algorithms, from Jeremy Siek
        and a University of Notre Dame team.</li>
    <li><a href="utility/iterator_adaptors.htm">iterator adaptors</a>
        - Adapt a base type into a standard conforming iterator,
        and more, from Dave Abrahams, Jeremy Siek, and John
        Potter.</li>
    <li><a href="utility/operators.htm">operators</a> - Templates
        ease arithmetic classes and iterators, from Dave Abrahams
        and Jeremy Siek.</li>
    <li><a href="tokenizer/index.htm">tokenizer</a> - Break of a string or other
      character sequence into a series of tokens, from John Bandela.</li>
</ul>

<h3><a name="Algorithms">Algorithms</a></h3>

<ul>
    <li><a href="graph/doc/table_of_contents.html">graph</a> -
        Generic graph components and algorithms, from Jeremy Siek
        and a University of Notre Dame team.</li>
    <li><a href="utility/utility.htm">utility</a> - Class <b>next(),</b>&nbsp; <b>prior()</b>
      function templates, from Dave Abrahams and others. </li>
</ul>

<h3><a name="Function-objects">Function objects</a> and higher-order programming</h3>

<ul>
    <li><a href="bind/bind.html">bind</a> and <a href="bind/mem_fn.html"> mem_fn</a> - Generalized binders for function/object/pointers and member functions, from Peter Dimov.</li>

    <li><a href="compose/index.htm">compose</a> - Functional
        composition adapters for the STL, from Nicolai Josuttis.</li>
    <li><a href="function/index.html">function</a> - Function object wrappers
      for deferred calls or callbacks, from Doug Gregor.</li>
    <li><a href="functional/index.html">functional</a> - Enhanced
        function object adaptors, from Mark Rodgers.</li>
    <li><a href="lambda/doc/index.html">lambda</a> - Define small unnamed 
    function objects at the actual call site, and more, from Jaakko Järvi and 
    Gary Powell.</li>

    <li><a href="bind/ref.html">ref</a> - A utility library for
    passing references to generic functions, from Jaako J&auml;rvi,
    Peter Dimov, Doug Gregor, and Dave Abrahams.</li>

    <li><a href="signals/index.html">signals</a> - managed signals &amp;
         slots callback implementation, from Doug Gregor.</li>
</ul>

<h3><a name="Generic">Generic</a> Programming</h3>

<ul>
    <li><a href="utility/call_traits.htm">call_traits</a> -
        Defines types for passing parameters, from John Maddock,
        Howard Hinnant, et al.</li>
    <li><a href="concept_check/concept_check.htm">concept check</a>
        - Tools for generic programming, from Jeremy Siek.</li>
    <li><a href="utility/operators.htm">operators</a> - Templates
        ease arithmetic classes and iterators, from Dave Abrahams
        and Jeremy Siek.</li>
    <li><a href="property_map/property_map.html">property map</a>
        - Concepts defining interfaces which map key objects to
        value objects, from Jeremy Siek.</li>
    <li><a href="static_assert/static_assert.htm">static_assert</a>
        - Static assertions (compile time assertions), from John
        Maddock.</li>
    <li><a href="type_traits/index.htm">type_traits</a> -
        Templates for fundamental properties of types, from John
        Maddock, Steve Cleary, et al.</li>
</ul>

<h3>Template <a name="Metaprogramming"> Metaprogramming</a></h3>

<ul>
    <li><a href="mpl/doc/index.html">mpl</a> - Template metaprogramming 
    framework of compile-time algorithms, sequences and metafunction classes, 
    from Aleksey Gurtovoy.</li>
    <li><a href="static_assert/static_assert.htm">static_assert</a>
        - Static assertions (compile time assertions), from John
        Maddock.</li>
    <li><a href="type_traits/index.htm">type_traits</a> -
        Templates for fundamental properties of types, from John
        Maddock, Steve Cleary, et al.</li>
</ul>

<h3><a name="Preprocessor">Preprocessor</a> Metaprogramming</h3>

<ul>
    <li><a href="preprocessor/doc/index.html">preprocessor</a> - Preprocessor 
    metaprogramming tools including repetition and recursion, from Vesa Karvonen 
    and Paul Mensonides.</li>
</ul>

<h3><a name="Concurrent">Concurrent</a> Programming</h3>

<ul>
    <li><a href="thread/doc/index.html">thread</a> - Portable C++
      multi-threading, from William Kempf.</li>
</ul>

<h3><a name="Math">Math</a> and numerics</h3>

<ul>
    <li><a href="math/doc/index.html">math</a> - Several contributions in the 
    domain of mathematics, from various authors.</li>
    <li><a href="conversion/cast.htm">conversion/numeric_cast</a> - <tt>numeric_cast</tt>
      class template, from Kevlin Henney.</li>
    <li><a href="integer/index.htm">integer</a> - Headers to ease
        dealing with integral types.</li>
    <li><a href="numeric/interval/doc/interval.htm">interval </a>- Extends the 
    usual arithmetic functions to mathematical intervals, from Guillaume 
    Melquiond, Hervé Brönnimann and Sylvain Pion.</li>
    <li><a href="math/doc/common_factor.html">math/common_factor</a> - Greatest 
    common divisor and least common multiple, from Daryle Walker.</li>
    <li><a href="math/octonion/index.html">math/octonion</a> -
      Octonions, from Hubert Holin.</li>
    <li><a href="math/quaternion/index.html">math/quaterion</a> -
      Quaterions, from Hubert Holin.</li>
    <li><a href="math/special_functions/index.html">math/special_functions</a> -
        Mathematical special functions such as atanh, sinc, and sinhc,
        from Hubert Holin.</li>
    <li><a href="multi_array/doc/index.html">multi_array</a> - Multidimensional 
    containers and adaptors for arrays of contiguous data, from Ron Garcia.</li>
    <li><a href="utility/operators.htm">operators</a> - Templates
        ease arithmetic classes and iterators, from Dave Abrahams
        and Jeremy Siek.</li>
    <li><a href="random/index.html">random</a> - A complete
        system for random number generation, from Jens Maurer.</li>
    <li><a href="rational/index.html">rational</a> - A rational
        number class, from Paul Moore.</li>
    <li><a href="numeric/ublas/doc/index.htm">uBLAS</a> - Basic linear algebra 
    for dense, packed and sparse matrices, from Joerg Walter and Mathias Koch.</li>
</ul>

<h3><a name="Correctness">Correctness</a> and testing</h3>

<ul>
    <li><a href="concept_check/concept_check.htm">concept check</a>
        - Tools for generic programming, from Jeremy Siek.</li>
    <li><a href="static_assert/static_assert.htm">static_assert</a>
        - Static assertions (compile time assertions), from John
        Maddock.</li>
    <li><a href="test/doc/index.htm">test</a> - Support for simple program testing, 
    full unit testing, and for program
      execution monitoring, from Gennadiy Rozental.</li>
</ul>

<h3><a name="Data">Data</a> structures</h3>

<ul>
    <li><a href="any/index.html">any</a> - Safe, generic container for single
      values of different value types, from Kevlin Henney.</li>
    <li><a href="utility/compressed_pair.htm">compressed_pair</a>
        - Empty member optimization, from John Maddock, Howard
        Hinnant, et al.</li>
    <li><a href="tuple/doc/tuple_users_guide.html">tuple</a> - Ease definition of functions returning multiple values, and more,
    from Jaakko Järvi.</li>
</ul>

<h3><a name="IO">Input/Output</a></h3>
<ul>
  <li><a href="format/index.htm">format</a> - Type-safe 'printf-like' format 
  operations, from Samuel Krempp.</li>
  <li><a href="io/doc/ios_state.html">io state savers</a> - Save I/O state to 
  prevent jumbled data, from Daryle Walker.</li>
</ul>

<h3><a name="Inter-language">Inter-language</a> support</h3>

<ul>
    <li><a href="python/doc/index.html">python</a> - Reflects C++
        classes and functions into <a
        href="http://www.python.org">Python</a>, from Dave
        Abrahams.</li>
</ul>

<h3><a name="Memory">Memory</a></h3>

<ul>
    <li><a href="pool/doc/index.html">pool</a> - Memory pool management, from
      Steve Cleary.</li>
    <li><a href="smart_ptr/index.htm">smart_ptr</a> - Five smart
        pointer class templates, from Greg Colvin, Beman Dawes,
        Peter Dimov, and Darin Adler.</li>
    <li><a href="utility/utility.htm">utility</a> - Class <b>noncopyable</b>
        plus <b>checked_delete()</b>, <b>checked_array_delete()</b>, <b>next(),</b>&nbsp;
      <b>prior()</b>
        function templates, plus <b>base-from-member idiom</b>, from Dave Abrahams and others. </li>
</ul>

<h3><a name="Parsing">Parsing</a></h3>

<ul>
  <li><a href="spirit/index.html">spirit</a> - LL parser framework&nbsp; 
  represents parsers directly as EBNF grammars in inlined C++, from Joel de 
  Guzman and team.</li>
</ul>

<h3><a name="Miscellaneous">Miscellaneous</a></h3>

<ul>
    <li><a href="utility/base_from_member.html">base-from-member</a> - Idiom to 
    initialize a base class with a member, from Daryle Walker.</li>
    <li><a href="utility/compressed_pair.htm">compressed_pair</a>
        - Empty member optimization, from John Maddock, Howard
        Hinnant, et al.</li>
    <li><a href="conversion/index.htm">conversion</a> - Numeric,
        polymorphic, and lexical casts, from Dave Abrahams and
        Kevlin Henney.</li>
    <li><a href="crc/index.html">crc</a> - Cyclic Redundancy Code, from Daryle
      Walker.</li>
    <li><a href="date_time/doc/index.html">date_time</a> - Date-Time library from Jeff Garland.</li>
    <li><a href="filesystem/doc/index.htm">filesystem</a> - Portable paths, 
    iteration over directories, and other useful filesystem operations, from 
    Beman Dawes.</li>
    <li><a href="optional/doc/optional.html">optional</a> - Discriminated-union 
    wrapper for optional values, from Fernando Cacciola.</li>
    <li><a href="timer/index.htm">timer</a> - Event timer,
        progress timer, and progress display classes, from Beman
        Dawes.</li>
    <li><a href="utility/utility.htm">utility</a> - Class <b>noncopyable</b>
        plus <b>checked_delete()</b>, <b>checked_array_delete()</b>, <b>next(),</b>&nbsp;
      <b>prior()</b>
        function templates, plus <b>base-from-member idiom</b>, from Dave Abrahams and others. </li>
</ul>

<h3>Broken compiler <a name="workarounds">workarounds</a></h3>

<ul>
    <li><a href="compatibility/index.html">compatibility</a> - Help for
      non-conforming standard libraries, from Ralf Grosse-Kunstleve and Jens
      Maurer.</li>
    <li><a href="config/config.htm">config</a> - Helps boost
        library developers adapt to compiler idiosyncrasies; not
        intended for library users.</li>
</ul>

<p>[Category suggestions from Aleksey Gurtovoy and Beman Dawes]</p>

<hr>

<h2><a name="Obsolete">Obsolete</a> Libraries</h2>

<ul>
    <li><a href="min_rand/index.htm">min_rand</a> - a random
        number generator class from Beman Dawes. Replaced by <a
        href="random/index.html">random</a>.</li>
</ul>

<hr>

<p>Revised 
<!--webbot bot="Timestamp" s-type="EDITED"
s-format="%d %b %Y" startspan -->04 Feb 2003<!--webbot bot="Timestamp" endspan i-checksum="14388" --></p>
</body>
</html>