subproject libs/graph/test ;

SEARCH on testing.jam = $(BOOST_BUILD_PATH) ;
include testing.jam ;

# Define SGB (stanford graph base top level directory) and 
# LEDA (also top level directory) at the command line of jam using -s

unit-test transitive_closure_test : transitive_closure_test.cpp : <sysinclude>$(BOOST_ROOT) ;

compile adj_list_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

# adj_list_test needs some work -JGS
# unit-test adj_list_test : adj_list_test.cpp : <sysinclude>$(BOOST_ROOT)  ;
compile adj_matrix_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

unit-test bfs : bfs.cpp <lib>../../test/build/boost_test_exec_monitor : <sysinclude>$(BOOST_ROOT)  ;

compile bfs_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

unit-test dfs : dfs.cpp <lib>../../test/build/boost_test_exec_monitor : <sysinclude>$(BOOST_ROOT)  ;

compile dfs_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile dijkstra_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile edge_list_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile filtered_graph_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

unit-test graph : graph.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile graph_concepts.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile leda_graph_cc.cpp : <sysinclude>$(BOOST_ROOT) : 
  <include>$(LEDA)/incl <library-file>$(LEDA)/libG.a ;

compile reverse_graph_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile stanford_graph_cc.cpp : <sysinclude>$(BOOST_ROOT) 
   <include>$(SGB) <library-file>$(SGB)/libgb.a  ;

unit-test subgraph : subgraph.cpp <lib>../../test/build/boost_test_exec_monitor : <sysinclude>$(BOOST_ROOT)  ;

unit-test isomorphism : isomorphism.cpp <lib>../../test/build/boost_test_exec_monitor : <sysinclude>$(BOOST_ROOT)  ;

compile vector_graph_cc.cpp : <sysinclude>$(BOOST_ROOT)  ;

compile copy.cpp : <sysinclude>$(BOOST_ROOT) ;


