#include "common.h"
#include "_shaders_config.h"

struct   vf
{
        float4         hpos        :         POSITION        ;
           float2  tbase        :        TEXCOORD0        ;  // base
           float2         tnorm0        :        TEXCOORD1        ;  // nm0
           float2         tnorm1        :        TEXCOORD2        ;  // nm1
        half3         M1                :        TEXCOORD3        ;
        half3         M2                :        TEXCOORD4        ;
        half3         M3                :        TEXCOORD5        ;
        half3        v2point        :        TEXCOORD6        ;
#ifdef	USE_SOFT_WATER
		half4	tctexgen    : TEXCOORD7;  // position in view space for pixel shader
#endif
           half4        c0                :          COLOR0                ;
        float          fog        :         FOG                ;
};

uniform        sampler2D                s_nmap;
uniform        samplerCUBE                s_env0;
uniform        samplerCUBE                s_env1;
uniform sampler2D	s_leaves;

////////////////////////////////////////////////////////////////////////////////
// Pixel

half4   main  ( vf I )          : COLOR
{
        half4        base                 = tex2D           (s_base,I.tbase);
        half3        n0                        = tex2D           (s_nmap,I.tnorm0);
        half3        n1                        = tex2D           (s_nmap,I.tnorm1);
        half3        Navg                = n0 + n1 - 1        ;

        half3         Nw                     = mul                (half3x3(I.M1, I.M2, I.M3), Navg);
                        Nw                        = normalize        (Nw);
        half3         v2point           = normalize        (I.v2point);
        half3        vreflect        	= reflect        (v2point, Nw)        ;
                        vreflect.y      = vreflect.y*2-1;                                // fake remapping
        half3        env0               = texCUBE          (s_env0, vreflect);
        half3        env1               = texCUBE          (s_env1, vreflect);
        half3         env               = lerp                (env0,env1,L_ambient.w);

        half          fresnel                = saturate        (dot(vreflect,v2point));
		half 		power = pow(fresnel,9);
        half         amount             = 0.15h+0.25h*power;                        // 1=full env, 0=no env

        half3        c_reflection       = env*amount        ;
        half3        final              = lerp(c_reflection,base.rgb,base.a)        ;
					 final*=I.c0*2		;
#if defined(WATER_NO_MOVE)
	final.xyz *= I.c0.xyz*0.5;
	power *= 0.5;
#else
	final.xyz *= I.c0.xyz*2;
#endif

#ifdef	USE_SOFT_WATER
	float alpha = 0.75h+0.25h*power;                        // 1=full env, 0=no env
	//	additional depth test
	float _z = 	tex2Dproj( s_position, I.tctexgen).z; 
	float waterDepth = (_z-I.tctexgen.z);
	
	//	water fog
	float fog_exp_intens = -4.0h;
	float fog = 1 - exp(fog_exp_intens*waterDepth);
	float3 Fc = float3(0.1h, 0.1h, 0.1h) * SW_WATER_INTENSITY;
	final = lerp(Fc, final, alpha);

	alpha = min(alpha, saturate(waterDepth));
	alpha = max (fog, alpha);
		
	#ifndef LOW_WATER_DEPTH
		#ifdef SW_USE_FOAM
			//	Leaves
			float4	leaves	= tex2D(s_leaves, I.tbase);
					leaves.rgb *= SW_WATER_INTENSITY;
					leaves.rgb = saturate(leaves.rgb);
			float	calc_cos = -dot(float3(I.M1.z, I.M2.z, I.M3.z),  normalize(v2point));
			float	calc_depth = saturate(waterDepth*calc_cos);
			float	fLeavesFactor = smoothstep(0.025, 0.05, calc_depth );
					fLeavesFactor *= smoothstep(0.075+SW_FOAM_THICKNESS, 0.05+SW_FOAM_THICKNESS, calc_depth );
			final		= lerp(final, leaves.rgb, leaves.a*fLeavesFactor);
			alpha		= lerp(alpha, leaves.a, leaves.a*fLeavesFactor);
		#endif
		//	Fogging
		final 		= lerp(fog_color, final, I.fog);
		alpha		*= I.fog*I.fog;

		return  float4   (final, alpha )                ;
//		return  float4   (final, alpha*I.c0.a*I.c0.a );
	#else
		return  float4   (final, saturate(alpha*5));
	#endif 	// LOW_WATER_DEPTH
#else	//	USE_SOFT_WATER
    return  float4   (final, 1 );
#endif	//	USE_SOFT_WATER
}
