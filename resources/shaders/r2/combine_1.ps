#include "common.h"
#include "lmodel.h"
#include "hmodel.h"

struct         _input      {
        float4         hpos        : POSITION        ;
#ifdef        USE_VTF
          float4         tc0                : TEXCOORD0        ;        // tc.xy, tc.w = tonemap scale
#else
          float2         tc0                : TEXCOORD0        ;        // tc.xy
#endif
};

struct        _out                {
        half4        low                : COLOR0        ;
        half4        high        : COLOR1        ;
};

uniform sampler1D         fog_table        ;
_out         main                ( _input I )
{
          // Sample the buffers:
          float4 P        = tex2D         (s_position,      I.tc0);                // position.(mtl or sun)
          half4 N         = tex2D         (s_normal,        I.tc0);                // normal.hemi
          half4 D         = tex2D         (s_diffuse,       I.tc0);                // rgb.gloss
          half4 L         = tex2D         (s_accumulator, 	I.tc0);                // diffuse.specular

#ifdef         USE_SUPER_SPECULAR
        {
                half        ds      	= dot        (D.rgb,1.h/3.h)  	;
                       		D.w         = max        (D.w, 	ds*ds/8.h)	;
        }
#endif

#ifdef  FORCE_GLOSS
        D.w                =        FORCE_GLOSS                ;
#endif

#ifdef         USE_GAMMA_22
        D.rgb        =        (D.rgb*D.rgb)        ;        // pow(2.2)
#endif

        // static sun
	half mtl 		= P.w;
#ifdef        USE_R2_STATIC_SUN
	half	sun_occ        	=       P.w*2	;
			mtl 			= 		xmaterial;
            L              +=       Ldynamic_color * sun_occ * plight_infinity	(mtl, P.xyz, N.xyz, Ldynamic_dir);
#endif

        // hemisphere
        half3       hdiffuse,hspecular;

        hmodel		(hdiffuse, hspecular, mtl, N.w, D.w, P.xyz, N.xyz);
		//			hdiffuse*=hdiffuse;			//. high contrast hemi

        half4         light       = half4         (L.rgb + hdiffuse, L.w)        ;
        half4         C           = D*light       ;                                                        // rgb.gloss * light(diffuse.specular)
        half3         spec        = C.www         + hspecular;        // replicated specular
#ifdef         USE_SUPER_SPECULAR
                      spec      = (C.rgb*.5h + .5h)*C.w + hspecular        ;
#endif
		half3       color     = C.rgb + spec     ;

        //. color + hemi + sun + lighting + specular
		//			color 	= 	hdiffuse+hspecular+L.rgb+spec+C.rgb;
        //. hemi + sun + lighting + specular
		//			color 	= 	hdiffuse+hspecular+L.rgb+spec;
		//. hemi + sun + lighting no specular
		//			color 	= 	hdiffuse+hspecular+L.rgb;
		//. hemi + sun no specular
		//			color 	= 	hdiffuse+hspecular+L.rgb;
		//. sun + lighting + specular
		//			color 	= 	hspecular+L.rgb+spec;
		//. only lighting and specular
		// color 		= light.rgb + spec;

        // here should be distance fog
        float3        	pos        		= P.xyz;
        float         	distance		= length		(pos);
        float         	fog				= saturate		(distance*fog_params.w + fog_params.x); //
                      	color			= lerp     		(color,fog_color,fog);        			//
        half        	skyblend		= saturate		(fog*fog);

#ifdef         DBG_TMAPPING
        color                        	= D.xyz;
#endif

        // final tone-mapping
#ifdef        USE_VTF
        half          	tm_scale        = I.tc0.w;                // interpolated from VS
#else
        half         	tm_scale        = tex2D        (s_tonemap,I.tc0).x;
#endif

#ifdef        USE_SUPER_SPECULAR
        color        	= spec          - hspecular	;
#endif

        _out        	o;
        tonemap        	(o.low, o.high, color, tm_scale )	;
                        o.low.a         = skyblend	;
						o.high.a		= skyblend	;

//		o.low	= skyblend;
//		o.hight	= 0;

		return        	o;
}
